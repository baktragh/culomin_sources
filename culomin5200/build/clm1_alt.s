;
; File generated by cc65 v 2.18 - Git 08705a3
;
	.fopt		compiler,"cc65 v 2.18 - Git 08705a3"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_CLM_DATA_CHSET1
	.import		_CLM_DATA_CHSET2
	.import		_CLM_DATA_CAVES
	.import		_CLM_DATA_DL_CAVE
	.import		_CLM_RMT_AUX1
	.import		_CLM_RMT_AUX2
	.import		_CLM_RMT_MAIN
	.import		_CLM_RMT_MUSIC
	.import		_CLM_RMT_MUSIC_END
	.import		_clrscr
	.import		_gotoxy
	.import		_cputsxy
	.import		_cprintf
	.import		_cursor
	.import		_memcpy
	.import		_memset
	.export		_doGame
	.export		_relocateRmt
	.export		_paintElement
	.export		_paintCave
	.export		_rebuildCaveElementArray
	.export		_pmgInit
	.export		_setMinerPos
	.export		_repaintMiner
	.export		_delay
	.export		_adjustGameSpeed
	.export		_displayCongratulations
	.export		_displayGameOver
	.export		_displayReturnToMenuScreen
	.export		_setTextModeSettings
	.export		_displayMainMenu
	.export		_displayTrainingText
	.export		_displayGameSpeed
	.export		_displayStartingCave
	.import		_rmtInitMenuMusic
	.import		_rmtInitGameMusic
	.import		_rmtInitGameOverMusic
	.import		_rmtInitDummyMusic
	.import		_rmtPlayDiamond
	.import		_rmtPlayPicked
	.import		_rmtPlayDeath
	.import		_rmtPlayGratulation
	.import		_rmtPlayJump
	.import		_rmtAllStop
	.import		_rmtSuspend
	.import		_rmtResume
	.import		_rmtSetVBI
	.export		_moveLeft
	.export		_moveRight
	.export		_moveUp
	.export		_moveDown
	.export		_jumpUp
	.export		_fallDown
	.export		_handleHighJump
	.export		_updateStatusBar
	.export		_checkTreasure
	.export		_checkDeath
	.export		_checkJSCentered
	.export		_handlePause
	.export		_maxCaveReached
	.export		_startingCave
	.export		_dmactlStore
	.export		_lives
	.export		_currentCave
	.export		_diamondsInCave
	.export		_diamondsCollected
	.export		_caveDeath
	.export		_caveAllPicked
	.export		_stayHere
	.export		_gameOverType
	.export		_gameSpeed
	.export		_gameType
	.export		_menuDl1
	.export		_menuDl2
	.export		_x1
	.export		_y1
	.export		_i1
	.export		_i2
	.export		_z1
	.export		_caveElements
	.export		_caveBroken
	.export		_minerX
	.export		_minerY
	.export		_p0x
	.export		_p0y
	.export		_minerDataNormal
	.export		_minerDataJump
	.export		_trainingLiteral
	.export		_pausedLiteral
	.export		_hijs
	.export		_hiJump
	.import		_mvDelay
	.import		_dliHandler
	.import		_colorStore1
	.import		_colorStore2
	.import		_keypadCont
	.import		_keypadKey
	.import		_keypadDisable
	.import		_secondFire
	.import		_breakHandler
	.export		_minerData
	.export		_brokenSpeed
	.export		_hijumpSpeedA
	.export		_hijumpSpeedB
	.export		_controlDelay
	.export		_fallSpeed
	.export		_passable
	.export		_notJump
	.export		_broken
	.export		_elem2CharMap
	.export		_main

.segment	"DATA"

_minerData:
	.addr	_minerDataNormal

.segment	"RODATA"

_minerDataNormal:
	.byte	$3C
	.byte	$7E
	.byte	$5A
	.byte	$DB
	.byte	$FF
	.byte	$C3
	.byte	$66
	.byte	$3C
_minerDataJump:
	.byte	$3C
	.byte	$7E
	.byte	$5A
	.byte	$DB
	.byte	$FF
	.byte	$C3
	.byte	$7E
	.byte	$00
_trainingLiteral:
	.byte	$34
	.byte	$32
	.byte	$21
	.byte	$29
	.byte	$2E
	.byte	$29
	.byte	$2E
	.byte	$27
_pausedLiteral:
	.byte	$30
	.byte	$21
	.byte	$35
	.byte	$33
	.byte	$25
	.byte	$24
_passable:
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_notJump:
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_broken:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_elem2CharMap:
	.byte	$00
	.byte	$C0
	.byte	$C8
	.byte	$CA
	.byte	$C6
	.byte	$C4
	.byte	$DA
	.byte	$4E
	.byte	$C2
	.byte	$CC
	.byte	$54
	.byte	$56
	.byte	$58
	.byte	$E1
	.byte	$E3
	.byte	$E5
	.byte	$E7
	.byte	$E9
	.byte	$EB
	.byte	$ED
	.byte	$EF
	.byte	$50
	.byte	$52
L072D:
	.byte	$6A,$73,$20,$64,$6F,$77,$6E,$20,$64,$6F,$77,$6E,$28,$6C,$61,$64
	.byte	$64,$65,$72,$29,$00
L0630:
	.byte	$61,$6C,$74,$65,$72,$6E,$61,$74,$69,$76,$65,$20,$63,$6F,$6E,$74
	.byte	$72,$6F,$6C,$73,$00
L06FD:
	.byte	$72,$65,$74,$75,$72,$6E,$69,$6E,$67,$20,$74,$6F,$20,$6D,$65,$6E
	.byte	$75,$2E,$2E,$2E,$00
L0750:
	.byte	$77,$68,$65,$6E,$20,$74,$68,$65,$72,$65,$20,$69,$73,$20,$61,$20
	.byte	$72,$6F,$63,$6B,$00
L074B:
	.byte	$6D,$69,$6E,$65,$72,$20,$63,$61,$6E,$20,$6A,$75,$6D,$70,$20,$6F
	.byte	$6E,$6C,$79,$00
L075F:
	.byte	$70,$72,$65,$73,$73,$20,$30,$20,$66,$6F,$72,$20,$73,$75,$69,$63
	.byte	$69,$64,$65,$00
L0617:
	.byte	$20,$42,$41,$48,$41,$20,$53,$4F,$46,$54,$57,$41,$52,$45,$20,$32
	.byte	$30,$32,$30,$00
L061C:
	.byte	$46,$49,$52,$45,$20,$20,$20,$20,$73,$74,$61,$72,$74,$20,$67,$61
	.byte	$6D,$65,$00
L0741:
	.byte	$66,$69,$72,$65,$2B,$6C,$65,$66,$74,$20,$6F,$72,$20,$72,$69,$67
	.byte	$68,$74,$00
L0728:
	.byte	$6A,$73,$20,$75,$70,$20,$20,$20,$75,$70,$28,$6C,$61,$64,$64,$65
	.byte	$72,$29,$00
L063F:
	.byte	$63,$61,$76,$65,$73,$20,$61,$6E,$64,$20,$63,$6F,$6C,$6C,$65,$63
	.byte	$74,$00
L0755:
	.byte	$6F,$72,$20,$61,$20,$6C,$61,$64,$64,$65,$72,$20,$62,$65,$6C,$6F
	.byte	$77,$00
L063A:
	.byte	$74,$68,$72,$6F,$75,$67,$68,$20,$64,$61,$6E,$67,$65,$72,$6F,$75
	.byte	$73,$00
L0714:
	.byte	$63,$6F,$6E,$74,$72,$6F,$6C,$20,$74,$68,$65,$20,$6D,$69,$6E,$65
	.byte	$72,$00
L0764:
	.byte	$70,$72,$65,$73,$73,$20,$2A,$20,$66,$6F,$72,$20,$6D,$65,$6E,$75
	.byte	$00
L0696:
	.byte	$74,$68,$65,$20,$63,$75,$72,$73,$65,$20,$6F,$66,$20,$74,$68,$65
	.byte	$00
L060D:
	.byte	$20,$20,$20,$20,$43,$55,$52,$53,$45,$20,$4F,$46,$20,$54,$48,$45
	.byte	$00
L062B:
	.byte	$4A,$53,$20,$55,$50,$20,$20,$20,$74,$72,$61,$69,$6E,$69,$6E,$67
	.byte	$00
L0635:
	.byte	$67,$75,$69,$64,$65,$20,$74,$68,$65,$20,$6D,$69,$6E,$65,$72,$00
L070F:
	.byte	$75,$73,$65,$20,$6A,$6F,$79,$73,$74,$69,$63,$6B,$20,$74,$6F,$00
L06A0:
	.byte	$68,$61,$73,$20,$62,$65,$65,$6E,$20,$62,$72,$6F,$6B,$65,$6E,$00
L0612:
	.byte	$20,$20,$20,$20,$20,$4C,$4F,$53,$54,$20,$4D,$49,$4E,$45,$52,$00
L0691:
	.byte	$43,$4F,$4E,$47,$52,$41,$54,$55,$4C,$41,$54,$49,$4F,$4E,$53,$00
L0723:
	.byte	$6A,$73,$20,$72,$69,$67,$68,$74,$20,$72,$69,$67,$68,$74,$00
L0737:
	.byte	$73,$65,$63,$6F,$6E,$64,$61,$72,$79,$20,$66,$69,$72,$65,$00
L0626:
	.byte	$4A,$53,$20,$44,$4F,$57,$4E,$20,$73,$70,$65,$65,$64,$00
L071E:
	.byte	$6A,$73,$20,$6C,$65,$66,$74,$20,$20,$6C,$65,$66,$74,$00
L0644:
	.byte	$61,$6C,$6C,$20,$64,$69,$61,$6D,$6F,$6E,$64,$73,$00
L06D5:
	.byte	$67,$61,$6D,$65,$20,$69,$73,$20,$6F,$76,$65,$72,$00
L0621:
	.byte	$4A,$53,$20,$4C,$2F,$52,$20,$20,$63,$61,$76,$65,$00
L075A:
	.byte	$61,$76,$6F,$69,$64,$20,$73,$70,$69,$6B,$65,$73,$00
L06BA:
	.byte	$70,$72,$65,$73,$73,$20,$46,$49,$52,$45,$00
L06E2	:=	L06BA+0
L069B:
	.byte	$6C,$6F,$73,$74,$20,$6D,$69,$6E,$65,$72,$00
L0746:
	.byte	$6C,$6F,$6E,$67,$20,$6A,$75,$6D,$70,$73,$00
L0769	:=	L06BA+0
L073C:
	.byte	$68,$69,$67,$68,$20,$6A,$75,$6D,$70,$00
L0719:
	.byte	$4D,$4F,$56,$45,$4D,$45,$4E,$54,$00
L0732:
	.byte	$4A,$55,$4D,$50,$49,$4E,$47,$00
L065A:
	.byte	$53,$4C,$4F,$57,$00
L0661:
	.byte	$25,$30,$32,$64,$00
L0654:
	.byte	$4E,$4F,$52,$4D,$00

.segment	"BSS"

_maxCaveReached:
	.res	1,$00
_startingCave:
	.res	1,$00
_dmactlStore:
	.res	1,$00
_lives:
	.res	1,$00
_currentCave:
	.res	1,$00
_diamondsInCave:
	.res	1,$00
_diamondsCollected:
	.res	1,$00
_caveDeath:
	.res	1,$00
_caveAllPicked:
	.res	1,$00
_stayHere:
	.res	1,$00
_gameOverType:
	.res	1,$00
_gameSpeed:
	.res	1,$00
_gameType:
	.res	1,$00
_menuDl1:
	.res	1,$00
_menuDl2:
	.res	1,$00
_x1:
	.res	1,$00
_y1:
	.res	1,$00
_i1:
	.res	2,$00
_i2:
	.res	2,$00
_z1:
	.res	1,$00
_caveElements:
	.res	440,$00
_caveBroken:
	.res	440,$00
_minerX:
	.res	1,$00
_minerY:
	.res	1,$00
_p0x:
	.res	2,$00
_p0y:
	.res	2,$00
_hijs:
	.res	1,$00
_hiJump:
	.res	1,$00
_brokenSpeed:
	.res	1,$00
_hijumpSpeedA:
	.res	1,$00
_hijumpSpeedB:
	.res	1,$00
_controlDelay:
	.res	1,$00
_fallSpeed:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ doGame (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_doGame: near

.segment	"CODE"

	ldy     #$0F
	jsr     subysp
	lda     #<(_CLM_DATA_DL_CAVE)
	sta     $0005
	ldx     #>(_CLM_DATA_DL_CAVE)
	stx     $0006
	lda     _gameType
	bne     L07EE
	lda     _startingCave
	jmp     L07E7
L07EE:	lda     #$0D
L07E7:	sta     _currentCave
	lda     #$04
	sta     _lives
	lda     #<(_dliHandler)
	ldx     #>(_dliHandler)
	jsr     stax0sp
	lda     #$60
	sta     $D40E
	ldy     #$00
	lda     (sp),y
	sta     $0206
	jsr     ldax0sp
	stx     $0207
	lda     #$C0
	sta     $D40E
L07EF:	lda     $0007
	sta     _dmactlStore
	lda     #$00
	sta     $0007
	lda     _currentCave
	jsr     _rebuildCaveElementArray
	lda     #$00
	sta     _diamondsCollected
	lda     _currentCave
	and     #$03
	cmp     #$02
	bcs     L07F0
	lda     #$0C
	sta     $000D
	lda     #$96
	sta     $000E
	lda     #$32
	sta     $000C
	lda     #$34
	jmp     L0815
L07F0:	lda     #$0C
	sta     $000D
	lda     #$D8
	sta     $000E
	lda     #$54
	sta     $000C
	lda     #$56
L0815:	sta     $000F
	lda     #$00
	sta     $0010
	lda     $000D
	sta     _colorStore1
	lda     $000C
	sta     _colorStore2
	jsr     _paintCave
	jsr     _updateStatusBar
	lda     #>(_minerDataNormal)
	sta     _minerData+1
	lda     #<(_minerDataNormal)
	sta     _minerData
	lda     _minerX
	jsr     pusha
	lda     _minerY
	jsr     _setMinerPos
	lda     #$01
	sta     _stayHere
	lda     #$00
	ldy     #$09
	sta     (sp),y
	sta     _caveDeath
	sta     _caveAllPicked
	ldy     #$02
	sta     (sp),y
	ldy     #$08
	sta     (sp),y
	dey
	sta     (sp),y
	dey
	sta     (sp),y
	ldy     #$03
	sta     (sp),y
	lda     #$01
	ldy     #$0C
	sta     (sp),y
	lda     #$FF
	sta     _keypadKey
	lda     #$00
	sta     _secondFire
	ldy     #$05
	sta     (sp),y
	lda     _dmactlStore
	sta     $0007
	jmp     L02A1
L01D9:	lda     _keypadKey
	cmp     #$FF
	beq     L07F4
	cmp     #$0A
	beq     L07F1
	cmp     #$0E
	bne     L07F2
L07F1:	lda     #$FF
	sta     _keypadKey
	lda     #$00
	sta     _stayHere
	lda     #$01
	ldy     #$03
	sta     (sp),y
	jmp     L0807
L07F2:	lda     _keypadKey
	bne     L07F3
	lda     #$FF
	sta     _keypadKey
	lda     #$01
	sta     _caveDeath
	lda     #$00
	sta     _stayHere
	jmp     L01DA
L07F3:	lda     _keypadKey
	cmp     #$0D
	bne     L07F4
	jsr     _handlePause
L07F4:	lda     _minerX
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	sta     ptr1
	txa
	adc     #>(_caveElements)
	sta     ptr1+1
	ldy     _minerY
	lda     (ptr1),y
	ldy     #$0B
	sta     (sp),y
	lda     _minerX
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	sta     ptr1
	txa
	adc     #>(_caveElements)
	sta     ptr1+1
	ldx     #$00
	lda     _minerY
	jsr     incax1
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	ldy     #$0C
	sta     (sp),y
	tay
	lda     _passable,y
	cmp     #$01
	bne     L0202
	ldy     #$0B
	lda     (sp),y
	cmp     #$07
	beq     L0202
	iny
	lda     (sp),y
	cmp     #$07
	beq     L0202
	ldy     #$0A
	lda     (sp),y
	cmp     $0002
	beq     L021A
	dey
	lda     (sp),y
	clc
	adc     #$01
	sta     (sp),y
	lda     $0002
	iny
	sta     (sp),y
	dey
	lda     (sp),y
	cmp     _fallSpeed
	bne     L021A
	jsr     _fallDown
	ldy     #$08
	lda     (sp),y
	clc
	adc     #$01
	sta     (sp),y
	jsr     _checkDeath
	lda     #$00
	ldy     #$09
	sta     (sp),y
	dey
	lda     (sp),y
	cmp     #$07
	bcc     L021A
	lda     #$00
	sta     _stayHere
	lda     #$01
	sta     _caveDeath
	jmp     L02A1
L021A:	ldy     #$07
	lda     (sp),y
	ora     #$04
	jmp     L07E9
L0202:	ldy     #$07
	lda     (sp),y
	and     #$03
	beq     L07F8
	lda     #$02
	dey
	sta     (sp),y
	lda     #$00
L07F8:	ldy     #$09
	sta     (sp),y
	dey
	sta     (sp),y
	dey
L07E9:	sta     (sp),y
	ldy     #$0C
	lda     (sp),y
	tay
	lda     _broken,y
	cmp     #$01
	jne     L0258
	lda     _minerY
	clc
	adc     #$01
	sta     _y1
	ldy     #$04
	lda     (sp),y
	cmp     $0002
	beq     L07F9
	lda     _minerX
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveBroken)
	tay
	txa
	adc     #>(_caveBroken)
	tax
	tya
	clc
	adc     _y1
	bcc     L07DC
	inx
L07DC:	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     #$01
	jsr     staspidx
	lda     $0002
	ldy     #$04
	sta     (sp),y
L07F9:	lda     _minerX
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveBroken)
	sta     ptr1
	txa
	adc     #>(_caveBroken)
	sta     ptr1+1
	ldy     _y1
	lda     (ptr1),y
	cmp     _brokenSpeed
	jne     L0258
	lda     _minerX
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveBroken)
	tay
	txa
	adc     #>(_caveBroken)
	tax
	tya
	clc
	adc     _y1
	bcc     L07DE
	inx
L07DE:	sta     ptr1
	stx     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
	ldy     #$0C
	lda     (sp),y
	cmp     #$14
	bcs     L07FA
	lda     _minerX
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	tay
	txa
	adc     #>(_caveElements)
	tax
	tya
	clc
	adc     _y1
	bcc     L07DF
	inx
L07DF:	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     #$01
	jsr     staspidx
	jmp     L0826
L07FA:	lda     _minerX
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	tay
	txa
	adc     #>(_caveElements)
	tax
	tya
	clc
	adc     _y1
	bcc     L07E1
	inx
L07E1:	sta     ptr1
	stx     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
L0826:	lda     _minerX
	jsr     pusha
	lda     _y1
	jsr     pusha
	lda     _minerX
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	sta     ptr1
	txa
	adc     #>(_caveElements)
	sta     ptr1+1
	ldy     _y1
	lda     (ptr1),y
	jsr     _paintElement
L0258:	ldy     #$0C
	lda     (sp),y
	cmp     #$06
	bne     L07FB
	lda     _minerX
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	sta     ptr1
	txa
	adc     #>(_caveElements)
	sta     ptr1+1
	ldx     #$00
	lda     _minerY
	jsr     incax1
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	sta     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
	lda     _minerX
	jsr     pusha
	lda     _minerY
	clc
	adc     #$01
	jsr     pusha
	lda     #$00
	jsr     _paintElement
L07FB:	lda     _mvDelay
	jne     L02A1
	ldy     #$0E
	sta     (sp),y
	lda     $0011
	cmp     #$4C
	bcs     L07FC
	clc
	lda     #$01
	jmp     L0812
L07FC:	lda     $0011
	cmp     #$99
	bcc     L07FD
	clc
	lda     #$02
L0812:	adc     (sp),y
	sta     (sp),y
L07FD:	lda     $0012
	cmp     #$4C
	bcs     L07FE
	clc
	lda     #$04
	jmp     L0813
L07FE:	lda     $0012
	cmp     #$99
	bcc     L07FF
	clc
	lda     #$08
L0813:	adc     (sp),y
	sta     (sp),y
L07FF:	lda     $C010
	dey
	sta     (sp),y
	iny
	lda     (sp),y
	cmp     #$01
	jeq     L0300
	cmp     #$02
	beq     L02A4
	cmp     #$04
	jeq     L0361
	cmp     #$05
	jeq     L0300
	cmp     #$06
	beq     L02A4
	cmp     #$08
	jeq     L035C
	jmp     L0804
L02A4:	dey
	lda     (sp),y
	jne     L02A8
	dey
	lda     (sp),y
	tay
	lda     _notJump,y
	jne     L02A8
	jsr     _rmtPlayJump
	lda     #>(_minerDataJump)
	sta     _minerData+1
	lda     #<(_minerDataJump)
	sta     _minerData
	lda     #$00
	ldy     #$05
	sta     (sp),y
	ldy     #$08
	sta     (sp),y
	jsr     _jumpUp
	tax
	jne     L02A1
	lda     #$05
	jsr     leaa0sp
	jsr     _checkJSCentered
	ldx     #$00
	lda     #$06
	jsr     _delay
	lda     #$05
	jsr     leaa0sp
	jsr     _checkJSCentered
	jsr     _jumpUp
	tax
	jne     L02A1
	lda     #$05
	jsr     leaa0sp
	jsr     _checkJSCentered
	ldx     #$00
	lda     #$06
	jsr     _delay
	lda     #$05
	jsr     leaa0sp
	jsr     _checkJSCentered
	jsr     _moveRight
	lda     #$05
	jsr     leaa0sp
	jsr     _checkJSCentered
	ldx     #$00
	lda     #$06
	jsr     _delay
	lda     #$05
	jsr     leaa0sp
	jsr     _checkJSCentered
	jsr     _moveRight
	lda     #$05
	jsr     leaa0sp
	jsr     _checkJSCentered
	ldx     #$00
	lda     #$06
	jsr     _delay
	lda     #$05
	jsr     leaa0sp
	jsr     _checkJSCentered
	jsr     _moveRight
	lda     #$05
	jsr     leaa0sp
	jsr     _checkJSCentered
	ldx     #$00
	lda     #$06
	jsr     _delay
	lda     #$05
	jsr     leaa0sp
	jsr     _checkJSCentered
	jsr     _checkDeath
	lda     #>(_minerDataNormal)
	sta     _minerData+1
	lda     #<(_minerDataNormal)
	sta     _minerData
	jsr     _repaintMiner
	ldy     #$05
	lda     (sp),y
	jsr     bnega
	jmp     L0814
L02A8:	ldy     #$06
	lda     (sp),y
	jne     L02A1
	iny
	lda     (sp),y
	and     #$04
	cmp     #$04
	bne     L02E8
	lda     (sp),y
	and     #$02
	bne     L02F9
	jsr     _moveRight
	tax
	beq     L02F9
	ldy     #$07
	lda     (sp),y
	ora     #$02
	sta     (sp),y
	jmp     L02F9
L02E8:	dey
	lda     (sp),y
	bne     L02F9
	jsr     _moveRight
L02F9:	jsr     _checkDeath
	jmp     L02A1
L0300:	dey
	lda     (sp),y
	jne     L0304
	dey
	lda     (sp),y
	tay
	lda     _notJump,y
	jne     L0304
	jsr     _rmtPlayJump
	lda     #>(_minerDataJump)
	sta     _minerData+1
	lda     #<(_minerDataJump)
	sta     _minerData
	lda     #$00
	ldy     #$05
	sta     (sp),y
	ldy     #$08
	sta     (sp),y
	jsr     _jumpUp
	tax
	jne     L02A1
	lda     #$05
	jsr     leaa0sp
	jsr     _checkJSCentered
	ldx     #$00
	lda     #$06
	jsr     _delay
	lda     #$05
	jsr     leaa0sp
	jsr     _checkJSCentered
	jsr     _jumpUp
	tax
	jne     L02A1
	lda     #$05
	jsr     leaa0sp
	jsr     _checkJSCentered
	ldx     #$00
	lda     #$06
	jsr     _delay
	lda     #$05
	jsr     leaa0sp
	jsr     _checkJSCentered
	jsr     _moveLeft
	lda     #$05
	jsr     leaa0sp
	jsr     _checkJSCentered
	ldx     #$00
	lda     #$06
	jsr     _delay
	lda     #$05
	jsr     leaa0sp
	jsr     _checkJSCentered
	jsr     _moveLeft
	lda     #$05
	jsr     leaa0sp
	jsr     _checkJSCentered
	ldx     #$00
	lda     #$06
	jsr     _delay
	lda     #$05
	jsr     leaa0sp
	jsr     _checkJSCentered
	jsr     _moveLeft
	lda     #$05
	jsr     leaa0sp
	jsr     _checkJSCentered
	ldx     #$00
	lda     #$06
	jsr     _delay
	lda     #$05
	jsr     leaa0sp
	jsr     _checkJSCentered
	jsr     _checkDeath
	lda     #>(_minerDataNormal)
	sta     _minerData+1
	lda     #<(_minerDataNormal)
	sta     _minerData
	jsr     _repaintMiner
	ldy     #$05
	lda     (sp),y
	jsr     bnega
	jmp     L0814
L0304:	ldy     #$06
	lda     (sp),y
	bne     L02A1
	iny
	lda     (sp),y
	and     #$04
	cmp     #$04
	bne     L0344
	lda     (sp),y
	and     #$01
	bne     L0355
	jsr     _moveLeft
	tax
	beq     L0355
	ldy     #$07
	lda     (sp),y
	ora     #$01
	sta     (sp),y
	jmp     L0355
L0344:	dey
	lda     (sp),y
	bne     L0355
	jsr     _moveLeft
L0355:	jsr     _checkDeath
	jmp     L02A1
L035C:	jsr     _moveDown
	jsr     _checkDeath
	jmp     L02A1
L0361:	jsr     _moveUp
	jsr     _checkDeath
	jmp     L02A1
L0804:	lda     _secondFire
	beq     L0806
	lda     #$00
	sta     _secondFire
	ldy     #$0C
	lda     (sp),y
	tay
	lda     _notJump,y
	bne     L02A1
	ldy     #$08
	sta     (sp),y
	jsr     _rmtPlayJump
	jsr     _handleHighJump
	lda     #$01
	jmp     L0814
L0806:	sta     _mvDelay
L0814:	ldy     #$06
	sta     (sp),y
L02A1:	lda     _stayHere
	jne     L01D9
L01DA:	ldy     #$03
L0807:	lda     (sp),y
	beq     L0377
	lda     #$F8
	jsr     pusha
	lda     #$20
	jsr     _setMinerPos
	lda     #$03
	sta     _gameOverType
	jmp     L080F
L0377:	lda     _caveAllPicked
	beq     L037F
	lda     _gameType
	cmp     #$01
	bne     L0808
	lda     #$F8
	jsr     pusha
	lda     #$20
	jsr     _setMinerPos
	lda     #$03
	sta     _gameOverType
	jmp     L080F
L0808:	inc     _currentCave
	lda     _currentCave
	cmp     #$0D
	bne     L0809
	lda     #$F8
	jsr     pusha
	lda     #$20
	jsr     _setMinerPos
	lda     #$02
	sta     _gameOverType
	jmp     L080F
L0809:	lda     _currentCave
	sec
	sbc     _maxCaveReached
	bcc     L0395
	beq     L0395
	lda     _currentCave
	sta     _maxCaveReached
L0395:	jsr     _rmtPlayPicked
	jmp     L07EF
L037F:	lda     _caveDeath
	jeq     L07EF
	ldy     #$07
	lda     (sp),y
	and     #$04
	cmp     #$04
	bne     L03A3
	jmp     L080B
L080A:	inc     _minerY
	lda     _minerX
	jsr     pusha
	lda     _minerY
	jsr     _setMinerPos
	ldx     #$00
	lda     #$03
	jsr     _delay
L080B:	lda     _minerY
	cmp     #$16
	bcs     L03A3
	lda     _minerX
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	sta     ptr1
	txa
	adc     #>(_caveElements)
	sta     ptr1+1
	ldx     #$00
	lda     _minerY
	jsr     incax1
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	beq     L080A
L03A3:	lda     #$F8
	jsr     pusha
	lda     #$20
	jsr     _setMinerPos
	lda     _minerX
	jsr     pusha
	lda     _minerY
	jsr     pusha
	lda     #$15
	jsr     _paintElement
	jsr     _rmtPlayDeath
	ldx     #$00
	lda     #$0F
	jsr     _delay
	lda     _minerX
	jsr     pusha
	lda     _minerY
	jsr     pusha
	lda     #$16
	jsr     _paintElement
	ldx     #$00
	lda     #$0F
	jsr     _delay
	lda     _minerX
	jsr     pusha
	lda     _minerY
	jsr     pusha
	lda     #$15
	jsr     _paintElement
	ldx     #$00
	lda     #$05
	jsr     _delay
	lda     _lives
	bne     L080E
	lda     #$01
	sta     _gameOverType
	jmp     L080F
L080E:	dec     _lives
	jmp     L07EF
L080F:	lda     #$60
	sta     $D40E
	ldy     #$0F
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ relocateRmt (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_relocateRmt: near

.segment	"CODE"

	ldx     #$1D
	lda     #$82
	jsr     pushax
	lda     #<(_CLM_RMT_AUX1)
	ldx     #>(_CLM_RMT_AUX1)
	jsr     pushax
	lda     #<(_CLM_RMT_AUX2)
	sec
	sbc     #<(_CLM_RMT_AUX1)
	pha
	lda     #>(_CLM_RMT_AUX2)
	sbc     #>(_CLM_RMT_AUX1)
	tax
	pla
	jsr     _memcpy
	ldx     #$1E
	lda     #$00
	jsr     pushax
	lda     #<(_CLM_RMT_AUX2)
	ldx     #>(_CLM_RMT_AUX2)
	jsr     pushax
	lda     #<(_CLM_RMT_MAIN)
	sec
	sbc     #<(_CLM_RMT_AUX2)
	pha
	lda     #>(_CLM_RMT_MAIN)
	sbc     #>(_CLM_RMT_AUX2)
	tax
	pla
	jsr     _memcpy
	ldx     #$1F
	lda     #$00
	jsr     pushax
	lda     #<(_CLM_RMT_MAIN)
	ldx     #>(_CLM_RMT_MAIN)
	jsr     pushax
	lda     #<(_CLM_RMT_MUSIC)
	sec
	sbc     #<(_CLM_RMT_MAIN)
	pha
	lda     #>(_CLM_RMT_MUSIC)
	sbc     #>(_CLM_RMT_MAIN)
	tax
	pla
	jsr     _memcpy
	ldx     #$24
	lda     #$00
	jsr     pushax
	lda     #<(_CLM_RMT_MUSIC)
	ldx     #>(_CLM_RMT_MUSIC)
	jsr     pushax
	lda     #<(_CLM_RMT_MUSIC_END)
	sec
	sbc     #<(_CLM_RMT_MUSIC)
	pha
	lda     #>(_CLM_RMT_MUSIC_END)
	sbc     #>(_CLM_RMT_MUSIC)
	tax
	pla
	jmp     _memcpy

.endproc

; ---------------------------------------------------------------
; void __near__ paintElement (unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_paintElement: near

.segment	"CODE"

	jsr     pusha
	ldy     #$01
	lda     (sp),y
	jsr     pusha0
	lda     #$28
	jsr     tosumula0
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	clc
	adc     ptr1
	sta     ptr1
	lda     #$18
	adc     ptr1+1
	sta     ptr1+1
	ldx     #$00
	ldy     #$02
	lda     (sp),y
	asl     a
	bcc     L0828
	inx
	clc
L0828:	adc     ptr1
	sta     _i2
	txa
	adc     ptr1+1
	sta     _i2+1
	ldy     #$00
	lda     (sp),y
	tay
	lda     _elem2CharMap,y
	sta     _z1
	lda     _i2+1
	sta     ptr1+1
	lda     _i2
	sta     ptr1
	lda     _z1
	ldy     #$00
	sta     (ptr1),y
	lda     _i2
	ldx     _i2+1
	jsr     incax1
	sta     ptr1
	stx     ptr1+1
	lda     _z1
	clc
	adc     #$01
	sta     (ptr1),y
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ paintCave (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_paintCave: near

.segment	"CODE"

	lda     #$00
	sta     _y1
L082A:	lda     _y1
	cmp     #$16
	bcs     L03E9
	lda     #$00
	sta     _x1
L082B:	lda     _x1
	cmp     #$14
	bcs     L082C
	jsr     pusha
	lda     _y1
	jsr     pusha
	lda     _x1
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	sta     ptr1
	txa
	adc     #>(_caveElements)
	sta     ptr1+1
	ldy     _y1
	lda     (ptr1),y
	jsr     _paintElement
	inc     _x1
	jmp     L082B
L082C:	inc     _y1
	jmp     L082A
L03E9:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ rebuildCaveElementArray (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_rebuildCaveElementArray: near

.segment	"CODE"

	jsr     pusha
	jsr     decsp2
	jsr     push0
	jsr     decsp4
	ldy     #$08
	lda     (sp),y
	and     #$01
	beq     L0401
	lda     #>(_CLM_DATA_CHSET2)
	jmp     L082F
L0401:	lda     #>(_CLM_DATA_CHSET1)
L082F:	sta     $D409
	lda     #<(_CLM_DATA_CAVES)
	ldx     #>(_CLM_DATA_CAVES)
	ldy     #$02
	jsr     staxysp
	ldy     #$08
	lda     (sp),y
	jsr     pusha0
	lda     #$DE
	jsr     tosumula0
	ldy     #$02
	jsr     addeqysp
	lda     #$00
	sta     _diamondsInCave
	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     _minerY
	ldy     #$03
	jsr     ldaxysp
	jsr     incax1
	ldy     #$02
	jsr     staxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     _minerX
	ldy     #$03
	jsr     ldaxysp
	jsr     incax1
	ldy     #$02
	jsr     staxysp
	lda     #$00
	tay
L0835:	sta     (sp),y
	cmp     #$16
	jcs     L041F
	tya
	iny
L0830:	sta     (sp),y
	cmp     #$14
	jcs     L0420
	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	ldy     #$06
	sta     (sp),y
	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	and     #$0F
	ldy     #$07
	sta     (sp),y
	ldx     #$00
	txa
L0836:	ldy     #$04
	jsr     staxysp
	cmp     #$02
	txa
	sbc     #$00
	bvc     L0440
	eor     #$80
L0440:	bpl     L043A
	lda     #$06
	jsr     leaa0sp
	ldy     #$04
	clc
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	cmp     #$0E
	beq     L0833
	cmp     #$0F
	beq     L0451
	jmp     L043B
L0833:	inc     _diamondsInCave
	lda     #$06
	jsr     leaa0sp
	ldy     #$04
	clc
	adc     (sp),y
	pha
	txa
	iny
	adc     (sp),y
	tax
	pla
	jsr     pushax
	lda     _diamondsInCave
	jsr     pusha0
	lda     #$03
	jsr     tosumoda0
	ldy     #$0A
	jsr     incaxy
	ldy     #$00
	jsr     staspidx
	jmp     L043B
L0451:	lda     #$06
	jsr     leaa0sp
	ldy     #$04
	clc
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     #$0D
	ldy     #$00
	sta     (ptr1),y
L043B:	ldy     #$05
	jsr     ldaxysp
	jsr     incax1
	jmp     L0836
L043A:	ldy     #$01
	lda     (sp),y
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	sta     ptr1
	txa
	adc     #>(_caveElements)
	sta     ptr1+1
	ldy     #$00
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L082D
	inx
L082D:	sta     ptr1
	stx     ptr1+1
	ldy     #$06
	lda     (sp),y
	ldy     #$00
	sta     (ptr1),y
	iny
	ldx     #$00
	lda     (sp),y
	jsr     incax1
	jsr     pushax
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	sta     ptr1
	txa
	adc     #>(_caveElements)
	sta     ptr1+1
	ldy     #$00
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L082E
	inx
L082E:	sta     ptr1
	stx     ptr1+1
	ldy     #$07
	lda     (sp),y
	ldy     #$00
	sta     (ptr1),y
	ldy     #$03
	jsr     ldaxysp
	jsr     incax1
	ldy     #$02
	jsr     staxysp
	ldy     #$01
	clc
	lda     #$02
	adc     (sp),y
	jmp     L0830
L0420:	dey
	lda     (sp),y
	clc
	adc     #$01
	jmp     L0835
L041F:	lda     #<(_caveBroken)
	ldx     #>(_caveBroken)
	jsr     pushax
	ldx     #$01
	lda     #$B8
	jsr     __bzero
	ldy     #$09
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ pmgInit (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pmgInit: near

.segment	"CODE"

	lda     #$10
	sta     $D407
	lda     #$3E
	sta     $0007
	ldx     #$10
	lda     #$00
	jsr     pushax
	ldx     #$08
	jsr     __bzero
	lda     #$02
	sta     $C01D
	lda     #$C8
	sta     $0008
	ldx     #$00
	lda     #$80
	sta     _p0x
	stx     _p0x+1
	lda     _p0x
	sta     $C000
	txa
	sta     _p0y
	sta     _p0y+1
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ setMinerPos (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setMinerPos: near

.segment	"CODE"

	jsr     pusha
	ldy     #$01
	ldx     #$00
	lda     (sp),y
	jsr     aslax3
	ldy     #$30
	jsr     incaxy
	sta     _p0x
	stx     _p0x+1
	lda     #$00
	clc
	adc     _p0y
	sta     ptr1
	lda     #$10
	adc     _p0y+1
	sta     ptr1+1
	lda     #$00
	clc
	adc     ptr1
	sta     ptr1
	lda     #$04
	adc     ptr1+1
	sta     ptr1+1
	lda     #$00
	ldy     #$07
L0837:	sta     (ptr1),y
	dey
	bpl     L0837
	ldx     #$00
	lda     (sp,x)
	jsr     aslax3
	ldy     #$20
	jsr     incaxy
	sta     _p0y
	stx     _p0y+1
	lda     _p0x
	sta     $C000
	lda     #$00
	clc
	adc     _p0y
	sta     ptr1
	lda     #$10
	adc     _p0y+1
	sta     ptr1+1
	lda     #$00
	clc
	adc     ptr1
	pha
	lda     #$04
	adc     ptr1+1
	tax
	pla
	jsr     pushax
	lda     _minerData
	ldx     _minerData+1
	jsr     pushax
	ldx     #$00
	lda     #$08
	jsr     _memcpy
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ repaintMiner (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_repaintMiner: near

.segment	"CODE"

	ldx     #$00
	lda     _minerY
	jsr     aslax3
	ldy     #$20
	jsr     incaxy
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	clc
	adc     ptr1
	sta     ptr1
	lda     #$10
	adc     ptr1+1
	sta     ptr1+1
	lda     #$00
	clc
	adc     ptr1
	pha
	lda     #$04
	adc     ptr1+1
	tax
	pla
	jsr     pushax
	lda     _minerData
	ldx     _minerData+1
	jsr     pushax
	ldx     #$00
	lda     #$08
	jmp     _memcpy

.endproc

; ---------------------------------------------------------------
; void __near__ delay (unsigned int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_delay: near

.segment	"CODE"

	jsr     pushax
	jsr     push0
L083B:	jsr     stax0sp
	ldy     #$02
	cmp     (sp),y
	txa
	iny
	sbc     (sp),y
	bcs     L04A0
	lda     $0002
	jsr     pusha
	ldy     #$00
L083A:	lda     (sp),y
	cmp     $0002
	beq     L083A
	jsr     incsp1
	jsr     ldax0sp
	jsr     incax1
	jmp     L083B
L04A0:	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ adjustGameSpeed (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_adjustGameSpeed: near

.segment	"CODE"

	jsr     pusha
	ldy     #$00
	lda     (sp),y
	bne     L083D
	lda     #$11
	sta     _brokenSpeed
	lda     #$06
	sta     _hijumpSpeedA
	lda     #$14
	sta     _hijumpSpeedB
	lda     #$0C
	sta     _controlDelay
	lda     #$04
	jmp     L083C
L083D:	lda     #$19
	sta     _brokenSpeed
	lda     #$08
	sta     _hijumpSpeedA
	lda     #$1A
	sta     _hijumpSpeedB
	lda     #$0F
	sta     _controlDelay
	lda     #$05
L083C:	sta     _fallSpeed
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ displayCongratulations (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_displayCongratulations: near

.segment	"CODE"

	lda     #$00
	sta     $0007
	lda     _menuDl1
	sta     $0005
	lda     _menuDl2
	sta     $0006
	jsr     _clrscr
	lda     #$02
	jsr     pusha
	lda     #$04
	jsr     pusha
	lda     #<(L0691)
	ldx     #>(L0691)
	jsr     _cputsxy
	lda     #$02
	jsr     pusha
	lda     #$06
	jsr     pusha
	lda     #<(L0696)
	ldx     #>(L0696)
	jsr     _cputsxy
	lda     #$02
	jsr     pusha
	lda     #$07
	jsr     pusha
	lda     #<(L069B)
	ldx     #>(L069B)
	jsr     _cputsxy
	lda     #$02
	jsr     pusha
	lda     #$08
	jsr     pusha
	lda     #<(L06A0)
	ldx     #>(L06A0)
	jsr     _cputsxy
	jsr     _setTextModeSettings
	lda     _dmactlStore
	sta     $0007
	ldx     #$00
	lda     #$32
	jsr     _delay
	lda     #$00
	sta     _x1
	tax
L083E:	lda     _x1
	cmp     #$03
	bcs     L083F
	jsr     _rmtPlayGratulation
	ldx     #$00
	lda     #$32
	jsr     _delay
	ldx     #$00
	inc     _x1
	jmp     L083E
L083F:	lda     #$64
	jsr     _delay
	lda     #$02
	jsr     pusha
	lda     #$0D
	jsr     pusha
	lda     #<(L06BA)
	ldx     #>(L06BA)
	jsr     _cputsxy
L0840:	lda     $C010
	bne     L0840
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ displayGameOver (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_displayGameOver: near

.segment	"CODE"

	lda     #$00
	sta     $0007
	lda     _menuDl1
	sta     $0005
	lda     _menuDl2
	sta     $0006
	jsr     _clrscr
	lda     #$04
	jsr     pusha
	lda     #$0B
	jsr     pusha
	lda     #<(L06D5)
	ldx     #>(L06D5)
	jsr     _cputsxy
	jsr     _setTextModeSettings
	lda     _dmactlStore
	sta     $0007
	ldx     #$00
	lda     #$96
	jsr     _delay
	lda     #$05
	jsr     pusha
	lda     #$0D
	jsr     pusha
	lda     #<(L06E2)
	ldx     #>(L06E2)
	jsr     _cputsxy
L0841:	lda     $C010
	bne     L0841
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ displayReturnToMenuScreen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_displayReturnToMenuScreen: near

.segment	"CODE"

	lda     #$00
	sta     $0007
	lda     _menuDl1
	sta     $0005
	lda     _menuDl2
	sta     $0006
	jsr     _clrscr
	lda     #$00
	jsr     pusha
	lda     #$0A
	jsr     pusha
	lda     #<(L06FD)
	ldx     #>(L06FD)
	jsr     _cputsxy
	jsr     _setTextModeSettings
	lda     _dmactlStore
	sta     $0007
	ldx     #$00
	lda     #$7D
	jmp     _delay

.endproc

; ---------------------------------------------------------------
; void __near__ setTextModeSettings (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setTextModeSettings: near

.segment	"CODE"

	lda     #$FF
	sta     $000C
	lda     #$0E
	sta     $000D
	lda     #$32
	sta     $0010
	lda     #$F8
	sta     $D409
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ displayMainMenu (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_displayMainMenu: near

.segment	"CODE"

	lda     $0007
	sta     _dmactlStore
	lda     #$00
	sta     $0007
	lda     _menuDl1
	sta     $0005
	lda     _menuDl2
	sta     $0006
	jsr     _setTextModeSettings
	jsr     _clrscr
	lda     #$00
	jsr     _cursor
	lda     #$00
	jsr     pusha
	jsr     pusha
	lda     #<(L060D)
	ldx     #>(L060D)
	jsr     _cputsxy
	lda     #$00
	jsr     pusha
	lda     #$01
	jsr     pusha
	lda     #<(L0612)
	ldx     #>(L0612)
	jsr     _cputsxy
	lda     #$00
	jsr     pusha
	lda     #$03
	jsr     pusha
	lda     #<(L0617)
	ldx     #>(L0617)
	jsr     _cputsxy
	lda     #$01
	jsr     pusha
	lda     #$08
	jsr     pusha
	lda     #<(L061C)
	ldx     #>(L061C)
	jsr     _cputsxy
	lda     #$01
	jsr     pusha
	lda     #$0A
	jsr     pusha
	lda     #<(L0621)
	ldx     #>(L0621)
	jsr     _cputsxy
	lda     #$01
	jsr     pusha
	lda     #$0B
	jsr     pusha
	lda     #<(L0626)
	ldx     #>(L0626)
	jsr     _cputsxy
	lda     #$01
	jsr     pusha
	lda     #$0D
	jsr     pusha
	lda     #<(L062B)
	ldx     #>(L062B)
	jsr     _cputsxy
	lda     #$00
	jsr     pusha
	lda     #$12
	jsr     pusha
	lda     #<(L0630)
	ldx     #>(L0630)
	jsr     _cputsxy
	lda     #$01
	jsr     pusha
	lda     #$14
	jsr     pusha
	lda     #<(L0635)
	ldx     #>(L0635)
	jsr     _cputsxy
	lda     #$01
	jsr     pusha
	lda     #$15
	jsr     pusha
	lda     #<(L063A)
	ldx     #>(L063A)
	jsr     _cputsxy
	lda     #$01
	jsr     pusha
	lda     #$16
	jsr     pusha
	lda     #<(L063F)
	ldx     #>(L063F)
	jsr     _cputsxy
	lda     #$01
	jsr     pusha
	lda     #$17
	jsr     pusha
	lda     #<(L0644)
	ldx     #>(L0644)
	jsr     _cputsxy
	jsr     _displayStartingCave
	jsr     _displayGameSpeed
	lda     _dmactlStore
	sta     $0007
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ displayTrainingText (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_displayTrainingText: near

.segment	"CODE"

	jsr     _clrscr
	lda     #$F8
	jsr     pusha
	lda     #$20
	jsr     _setMinerPos
	lda     #$00
	jsr     pusha
	jsr     pusha
	lda     #<(L070F)
	ldx     #>(L070F)
	jsr     _cputsxy
	lda     #$00
	jsr     pusha
	lda     #$01
	jsr     pusha
	lda     #<(L0714)
	ldx     #>(L0714)
	jsr     _cputsxy
	lda     #$00
	jsr     pusha
	lda     #$03
	jsr     pusha
	lda     #<(L0719)
	ldx     #>(L0719)
	jsr     _cputsxy
	lda     #$00
	jsr     pusha
	lda     #$04
	jsr     pusha
	lda     #<(L071E)
	ldx     #>(L071E)
	jsr     _cputsxy
	lda     #$00
	jsr     pusha
	lda     #$05
	jsr     pusha
	lda     #<(L0723)
	ldx     #>(L0723)
	jsr     _cputsxy
	lda     #$00
	jsr     pusha
	lda     #$06
	jsr     pusha
	lda     #<(L0728)
	ldx     #>(L0728)
	jsr     _cputsxy
	lda     #$00
	jsr     pusha
	lda     #$07
	jsr     pusha
	lda     #<(L072D)
	ldx     #>(L072D)
	jsr     _cputsxy
	lda     #$00
	jsr     pusha
	lda     #$09
	jsr     pusha
	lda     #<(L0732)
	ldx     #>(L0732)
	jsr     _cputsxy
	lda     #$00
	jsr     pusha
	lda     #$0A
	jsr     pusha
	lda     #<(L0737)
	ldx     #>(L0737)
	jsr     _cputsxy
	lda     #$00
	jsr     pusha
	lda     #$0B
	jsr     pusha
	lda     #<(L073C)
	ldx     #>(L073C)
	jsr     _cputsxy
	lda     #$00
	jsr     pusha
	lda     #$0C
	jsr     pusha
	lda     #<(L0741)
	ldx     #>(L0741)
	jsr     _cputsxy
	lda     #$00
	jsr     pusha
	lda     #$0D
	jsr     pusha
	lda     #<(L0746)
	ldx     #>(L0746)
	jsr     _cputsxy
	lda     #$00
	jsr     pusha
	lda     #$0F
	jsr     pusha
	lda     #<(L074B)
	ldx     #>(L074B)
	jsr     _cputsxy
	lda     #$00
	jsr     pusha
	lda     #$10
	jsr     pusha
	lda     #<(L0750)
	ldx     #>(L0750)
	jsr     _cputsxy
	lda     #$00
	jsr     pusha
	lda     #$11
	jsr     pusha
	lda     #<(L0755)
	ldx     #>(L0755)
	jsr     _cputsxy
	lda     #$00
	jsr     pusha
	lda     #$13
	jsr     pusha
	lda     #<(L075A)
	ldx     #>(L075A)
	jsr     _cputsxy
	lda     #$00
	jsr     pusha
	lda     #$14
	jsr     pusha
	lda     #<(L075F)
	ldx     #>(L075F)
	jsr     _cputsxy
	lda     #$00
	jsr     pusha
	lda     #$15
	jsr     pusha
	lda     #<(L0764)
	ldx     #>(L0764)
	jsr     _cputsxy
	lda     #$00
	jsr     pusha
	lda     #$17
	jsr     pusha
	lda     #<(L0769)
	ldx     #>(L0769)
	jsr     _cputsxy
L0842:	lda     $C010
	bne     L0842
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ displayGameSpeed (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_displayGameSpeed: near

.segment	"CODE"

	lda     _gameSpeed
	bne     L064E
	lda     #$0F
	jsr     pusha
	lda     #$0B
	jsr     pusha
	lda     #<(L0654)
	ldx     #>(L0654)
	jmp     _cputsxy
L064E:	lda     #$0F
	jsr     pusha
	lda     #$0B
	jsr     pusha
	lda     #<(L065A)
	ldx     #>(L065A)
	jmp     _cputsxy

.endproc

; ---------------------------------------------------------------
; void __near__ displayStartingCave (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_displayStartingCave: near

.segment	"CODE"

	lda     #$0F
	jsr     pusha
	lda     #$0A
	jsr     _gotoxy
	lda     #<(L0661)
	ldx     #>(L0661)
	jsr     pushax
	ldx     #$00
	lda     _startingCave
	jsr     incax1
	jsr     pushax
	ldy     #$04
	jmp     _cprintf

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ moveLeft (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_moveLeft: near

.segment	"CODE"

	lda     _minerX
	beq     L0844
	ldx     #$00
	lda     _minerX
	jsr     decax1
	jsr     pushax
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	sta     ptr1
	txa
	adc     #>(_caveElements)
	sta     ptr1+1
	ldy     _minerY
	lda     (ptr1),y
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_passable)
	sta     ptr1+1
	ldy     #<(_passable)
	lda     (ptr1),y
	bne     L0845
L0844:	tax
	rts
L0845:	dec     _minerX
	lda     _minerX
	jsr     pusha
	lda     _minerY
	jsr     _setMinerPos
	jsr     _checkTreasure
	lda     _controlDelay
	sta     _mvDelay
	ldx     #$00
	lda     #$01
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ moveRight (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_moveRight: near

.segment	"CODE"

	lda     _minerX
	cmp     #$13
	beq     L0847
	ldx     #$00
	lda     _minerX
	jsr     incax1
	jsr     pushax
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	sta     ptr1
	txa
	adc     #>(_caveElements)
	sta     ptr1+1
	ldy     _minerY
	lda     (ptr1),y
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_passable)
	sta     ptr1+1
	ldy     #<(_passable)
	lda     (ptr1),y
	bne     L0848
L0847:	ldx     #$00
	txa
	rts
L0848:	inc     _minerX
	lda     _minerX
	jsr     pusha
	lda     _minerY
	jsr     _setMinerPos
	jsr     _checkTreasure
	lda     _controlDelay
	sta     _mvDelay
	ldx     #$00
	lda     #$01
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ moveUp (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_moveUp: near

.segment	"CODE"

	lda     _minerY
	bne     L084B
	rts
L084B:	lda     _minerX
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	sta     ptr1
	txa
	adc     #>(_caveElements)
	sta     ptr1+1
	ldx     #$00
	lda     _minerY
	jsr     decax1
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     _x1
	ldy     _x1
	lda     _passable,y
	beq     L04FD
	lda     _minerX
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	sta     ptr1
	txa
	adc     #>(_caveElements)
	sta     ptr1+1
	ldy     _minerY
	lda     (ptr1),y
	cmp     #$07
	bne     L04FD
	lda     _x1
	cmp     #$09
	bne     L084A
	lda     #$00
	sta     _stayHere
	lda     #$01
	sta     _caveDeath
	rts
L084A:	dec     _minerY
	lda     _minerX
	jsr     pusha
	lda     _minerY
	jsr     _setMinerPos
	jsr     _checkTreasure
	lda     _controlDelay
	sta     _mvDelay
L04FD:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ moveDown (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_moveDown: near

.segment	"CODE"

	lda     _minerY
	cmp     #$15
	beq     L04D7
	lda     _minerX
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	sta     ptr1
	txa
	adc     #>(_caveElements)
	sta     ptr1+1
	ldx     #$00
	lda     _minerY
	jsr     incax1
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     _x1
	ldy     _x1
	lda     _passable,y
	cmp     #$01
	bne     L04D7
	inc     _minerY
	lda     _minerX
	jsr     pusha
	lda     _minerY
	jsr     _setMinerPos
	jsr     _checkTreasure
	lda     _controlDelay
	sta     _mvDelay
L04D7:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ jumpUp (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_jumpUp: near

.segment	"CODE"

	ldx     #$00
	lda     _minerY
	beq     L084F
	lda     _minerX
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	sta     ptr1
	txa
	adc     #>(_caveElements)
	sta     ptr1+1
	ldx     #$00
	lda     _minerY
	jsr     decax1
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     _x1
	cmp     #$09
	bne     L0518
	sty     _stayHere
	lda     #$01
	sta     _caveDeath
	ldx     #$00
	rts
L0518:	ldy     _x1
	lda     _passable,y
	bne     L084E
	tax
	rts
L084E:	dec     _minerY
	lda     _minerX
	jsr     pusha
	lda     _minerY
	jsr     _setMinerPos
	jsr     _checkTreasure
	ldx     #$00
	txa
L084F:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ fallDown (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fallDown: near

.segment	"CODE"

	lda     _minerY
	cmp     #$15
	beq     L04E9
	lda     _minerX
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	sta     ptr1
	txa
	adc     #>(_caveElements)
	sta     ptr1+1
	ldx     #$00
	lda     _minerY
	jsr     incax1
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     _x1
	ldy     _x1
	lda     _passable,y
	cmp     #$01
	bne     L04E9
	inc     _minerY
	lda     _minerX
	jsr     pusha
	lda     _minerY
	jsr     _setMinerPos
	jmp     _checkTreasure
L04E9:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ handleHighJump (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_handleHighJump: near

.segment	"CODE"

	lda     _hijumpSpeedA
	jsr     pusha
	lda     #$00
	jsr     pusha
	jsr     decsp1
	lda     #>(_minerDataJump)
	sta     _minerData+1
	lda     #<(_minerDataJump)
	sta     _minerData
	lda     #$00
	sta     _y1
	lda     #$03
	sta     _hiJump
	lda     #$00
	sta     _mvDelay
	jmp     L0857
L0536:	jsr     _jumpUp
	tax
	beq     L0572
	jmp     L0537
L0852:	lda     _mvDelay
	bne     L055A
	sta     _hijs
	lda     $0011
	cmp     #$4C
	bcs     L0853
	lda     #$01
	jmp     L0851
L0853:	lda     $0011
	cmp     #$99
	bcc     L0854
	lda     #$02
L0851:	sta     _hijs
L0854:	lda     _hijs
	cmp     #$01
	beq     L055E
	cmp     #$02
	beq     L0568
	jmp     L0855
L055E:	lda     _y1
	bne     L055A
	jsr     _moveLeft
	tax
	beq     L055A
	lda     #$01
	sta     _y1
	jmp     L055A
L0568:	lda     _y1
	bne     L055A
	jsr     _moveRight
	tax
	beq     L055A
	lda     #$01
	sta     _y1
	jmp     L055A
L0855:	lda     #$00
	sta     _mvDelay
L055A:	ldy     #$00
	lda     (sp),y
	cmp     $0002
	beq     L0572
	lda     $0002
	sta     (sp),y
	iny
	lda     (sp),y
	clc
	adc     #$01
	sta     (sp),y
L0572:	ldy     #$01
	lda     (sp),y
	iny
	cmp     (sp),y
	bcc     L0852
	lda     _hiJump
	cmp     #$02
	bne     L0856
	lda     _hijumpSpeedB
	sta     (sp),y
L0856:	lda     #$00
	dey
	sta     (sp),y
	dec     _hiJump
L0857:	lda     _hiJump
	jne     L0536
L0537:	jsr     _checkDeath
	lda     #>(_minerDataNormal)
	sta     _minerData+1
	lda     #<(_minerDataNormal)
	sta     _minerData
	jsr     _repaintMiner
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ updateStatusBar (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updateStatusBar: near

.segment	"CODE"

	ldx     #$1B
	lda     #$70
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	ldy     #$27
L0858:	sta     (ptr1),y
	dey
	bpl     L0858
	lda     #$00
	sta     _y1
	tax
L085B:	lda     _y1
	cmp     _lives
	bcs     L085C
	ldx     #$1B
	lda     #$70
	clc
	adc     _y1
	bcc     L0859
	inx
L0859:	sta     ptr1
	stx     ptr1+1
	lda     #$7B
	ldy     #$00
	sta     (ptr1),y
	ldx     #$00
	inc     _y1
	jmp     L085B
L085C:	lda     _gameType
	cmp     #$01
	bne     L085D
	ldx     #$1B
	lda     #$90
	jsr     pushax
	lda     #<(_trainingLiteral)
	ldx     #>(_trainingLiteral)
	jsr     pushax
	ldx     #$00
	lda     #$08
	jmp     _memcpy
L085D:	lda     _currentCave
	ldy     #$1B
	jsr     incaxy
	clc
	adc     #$01
	sta     _x1
	lda     #$1B
	sta     _y1
L085E:	lda     _y1
	cmp     _x1
	bcs     L05E5
	ldx     #$1B
	lda     #$70
	clc
	adc     _y1
	bcc     L085A
	inx
L085A:	sta     ptr1
	stx     ptr1+1
	lda     #$60
	ldy     #$00
	sta     (ptr1),y
	inc     _y1
	jmp     L085E
L05E5:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ checkTreasure (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_checkTreasure: near

.segment	"CODE"

	lda     _minerX
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	sta     ptr1
	txa
	adc     #>(_caveElements)
	sta     ptr1+1
	ldy     _minerY
	lda     (ptr1),y
	sta     _x1
	cmp     #$0A
	lda     #$00
	tax
	bcc     L0867
	lda     _x1
	cmp     #$0D
	bcc     L0864
	txa
	rts
L0864:	inc     _diamondsCollected
	lda     _minerX
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	tay
	txa
	adc     #>(_caveElements)
	tax
	tya
	clc
	adc     _minerY
	bcc     L0860
	inx
L0860:	sta     ptr1
	stx     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
	lda     _minerX
	jsr     pusha
	lda     _minerY
	jsr     pusha
	lda     #$00
	jsr     _paintElement
	jsr     _rmtPlayDiamond
	ldx     #$00
	lda     _diamondsInCave
	cmp     _diamondsCollected
	bne     L0865
	stx     _stayHere
	lda     #$01
	sta     _caveAllPicked
L0865:	lda     #$01
	rts
L0867:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ checkDeath (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_checkDeath: near

.segment	"CODE"

	lda     _minerX
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	sta     ptr1
	txa
	adc     #>(_caveElements)
	sta     ptr1+1
	ldx     #$00
	lda     _minerY
	jsr     incax1
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     _x1
	cmp     #$08
	bne     L059F
	sty     _stayHere
	lda     #$01
	sta     _caveDeath
L059F:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ checkJSCentered (__near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_checkJSCentered: near

.segment	"CODE"

	jsr     pushax
	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	bne     L0587
	lda     $0011
	cmp     #$4C
	bcc     L086D
	cmp     #$99
	bcc     L0587
L086D:	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	jmp     L086E
L0587:	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	lda     #$01
L086E:	ldy     #$00
	sta     (ptr1),y
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ handlePause (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_handlePause: near

.segment	"CODE"

	jsr     decsp5
	lda     #$01
	sta     _keypadDisable
L0871:	lda     _keypadKey
	cmp     #$0D
	beq     L0871
	jsr     _rmtSuspend
	jsr     _rmtInitDummyMusic
	jsr     _rmtResume
	lda     sp
	ldx     sp+1
	jsr     pushax
	lda     #$0C
	jsr     pusha0
	lda     #$05
	jsr     _memcpy
	ldx     #$00
	lda     #$0C
	sta     ptr1
	stx     ptr1+1
	txa
	ldy     #$04
L086F:	sta     (ptr1),y
	dey
	bpl     L086F
	lda     #$00
	sta     $0008
	ldx     #$1B
	lda     #$70
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	ldy     #$27
L0870:	sta     (ptr1),y
	dey
	bpl     L0870
	ldx     #$1B
	lda     #$70
	jsr     pushax
	lda     #<(_pausedLiteral)
	ldx     #>(_pausedLiteral)
	jsr     pushax
	ldx     #$00
	lda     #$06
	jsr     _memcpy
	ldx     #$00
	lda     #$1E
	jsr     _delay
	lda     #$FF
	sta     _keypadKey
	lda     #$00
	sta     _keypadDisable
L0872:	lda     _keypadKey
	cmp     #$0D
	bne     L0872
	lda     #$01
	sta     _keypadDisable
	ldx     #$00
	lda     #$1E
	jsr     _delay
	lda     #$FF
	sta     _keypadKey
	jsr     _rmtSuspend
	jsr     _rmtInitGameMusic
	jsr     _rmtResume
	lda     #$0C
	jsr     pusha0
	lda     #$02
	jsr     leaa0sp
	jsr     pushax
	ldx     #$00
	lda     #$05
	jsr     _memcpy
	lda     #$C8
	sta     $0008
	jsr     _updateStatusBar
	lda     #$00
	sta     _keypadDisable
	jmp     incsp5

.endproc

; ---------------------------------------------------------------
; int __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

	lda     #$00
	sta     _gameOverType
	sta     _gameSpeed
	sta     _maxCaveReached
	jsr     _clrscr
	jsr     _relocateRmt
	lda     #$E0
	sta     $0000
	sta     $E80E
	lda     #$02
	sta     $E80F
	lda     #<(_keypadCont)
	sta     $020A
	ldx     #>(_keypadCont)
	stx     $020B
	lda     #<(_breakHandler)
	sta     $020C
	ldx     #>(_breakHandler)
	stx     $020D
	cli
	ldx     #$00
	lda     #$05
	jsr     _delay
	lda     _keypadKey
	cmp     #$0A
	bne     L00AD
	lda     #$0C
	sta     _maxCaveReached
	lda     #$FF
	sta     _keypadKey
L00AD:	jsr     _rmtSuspend
	lda     #$00
	sta     $D40E
	jsr     _rmtSetVBI
	lda     #$40
	sta     $D40E
	lda     $0005
	sta     _menuDl1
	lda     $0006
	sta     _menuDl2
	lda     #$00
	jsr     _cursor
	jsr     _pmgInit
L00C9:	lda     _gameOverType
	cmp     #$01
	beq     L00D2
	cmp     #$02
	beq     L00D9
	cmp     #$03
	beq     L00E0
	jmp     L00CF
L00D2:	jsr     _rmtSuspend
	jsr     _rmtInitGameOverMusic
	jsr     _rmtResume
	jsr     _displayGameOver
	jmp     L00CF
L00D9:	jsr     _rmtSuspend
	jsr     _rmtInitDummyMusic
	jsr     _rmtResume
	jsr     _displayCongratulations
	jmp     L00CF
L00E0:	jsr     _rmtSuspend
	jsr     _rmtInitDummyMusic
	jsr     _rmtResume
	jsr     _displayReturnToMenuScreen
L00CF:	jsr     _rmtSuspend
	jsr     _rmtInitMenuMusic
	jsr     _rmtResume
	lda     #$01
	jsr     pusha
	lda     #$06
	jsr     _setMinerPos
	jsr     _displayMainMenu
	lda     #$04
	sta     $C01F
L0873:	lda     $C010
	beq     L0873
L0874:	lda     $C010
	bne     L0875
	sta     _gameType
	jmp     L087A
L0875:	lda     $0011
	cmp     #$99
	bcc     L0876
	lda     _startingCave
	cmp     _maxCaveReached
	bcs     L0876
	inc     _startingCave
	jsr     _displayStartingCave
	ldx     #$00
	lda     #$0F
	jsr     _delay
	jmp     L0874
L0876:	lda     $0011
	cmp     #$4C
	bcs     L0877
	lda     _startingCave
	beq     L0877
	dec     _startingCave
	jsr     _displayStartingCave
	ldx     #$00
	lda     #$0F
	jsr     _delay
	jmp     L0874
L0877:	lda     $0012
	cmp     #$99
	bcc     L0878
	lda     #$01
	sec
	sbc     _gameSpeed
	sta     _gameSpeed
	jsr     _displayGameSpeed
	ldx     #$00
	lda     #$14
	jsr     _delay
	jmp     L0874
L0878:	lda     $0012
	cmp     #$4C
	bcs     L0874
	jsr     _displayTrainingText
	lda     #$01
	sta     _gameType
	lda     #$00
L087A:	sta     _gameOverType
	lda     _gameSpeed
	jsr     _adjustGameSpeed
	jsr     _rmtSuspend
	jsr     _rmtAllStop
	jsr     _rmtInitGameMusic
	jsr     _rmtResume
	jsr     _doGame
	jmp     L00C9

.endproc

