#Start address
FEATURES {
    STARTADDRESS: default = $2000;
}

#Symbols that can be used instead of numbers
SYMBOLS {
    __EXEHDR__:          type = import;
    __SYSTEM_CHECK__:    type = import;  # force inclusion of "system check" load chunk
    __AUTOSTART__:       type = import;  # force inclusion of autostart "trailer"
    __STACKSIZE__:       type = weak, value = $0800; # 2k stack
    __STARTADDRESS__:    type = export, value = %S;
    __RESERVED_MEMORY__: type = weak, value = $0000;
}
MEMORY {

#Zero page
    ZP:         file = "", define = yes, start = $0082, size = $007E;

# file header, just $FFFF, see libsrc/exehdr.s 
    HEADER:     file = %O,               start = $0000, size = $0002;

# "system check" load chunk (section header, contents, INIT vector)
    SYSCHKHDR:  file = %O,               start = $0000, size = $0004;
    SYSCHKCHNK: file = %O,               start = $2E00, size = $0300;
    SYSCHKTRL:  file = %O,               start = $0000, size = $0006;
    
# "raster music tracker player" binary file
# Address is zero, bacuse the binary file contains section headers)
    RMTPLAYER:  file = %O,                start = $0000, size = $1000;
    RMTSONG  :  file = %O,                start = $0000, size = $1000; 

# "main program" load chunk with some game data included. See libsrc/exehdr.s
# Note the STACK and RESERVED_MEMORY
    MAINHDR:    file = %O,               start = $0000, size = $0004;
    MAIN:       file = %O, define = yes, start = %S,    size = $BC20 - __STACKSIZE__ - __RESERVED_MEMORY__ - %S;

# "run address" 
# Segment comes from library, see libsrc/exetrailer.s
    TRAILER:    file = %O,              start = $0000, size = $0006;
    
    
# "PMG area" (2KB, start at $0800)
# Note that there is no file
    PMGAREA:   file = "",define=yes,    start = $0800, size = $0800;
    
# "Cave screen and status bar"
# Note that there is no file
    CAVESCREEN: file= "",define=yes,    start = $1000, size = 880;
    STATUSBARSCREEN: file=""            start = $1000+880, size = 40;
         
    
}
SEGMENTS {
#Segment used by the main program and library
    ZEROPAGE:  load = ZP,         type = zp;
    EXTZP:     load = ZP,         type = zp,                optional = yes;
    EXEHDR:    load = HEADER,     type = ro;
    SYSCHKHDR: load = SYSCHKHDR,  type = ro,                optional = yes;
    SYSCHK:    load = SYSCHKCHNK, type = rw,  define = yes, optional = yes;
    SYSCHKTRL: load = SYSCHKTRL,  type = ro,                optional = yes;
    MAINHDR:   load = MAINHDR,    type = ro;
    STARTUP:   load = MAIN,       type = ro,  define = yes;
    LOWCODE:   load = MAIN,       type = ro,  define = yes, optional = yes;
    ONCE:      load = MAIN,       type = ro,                optional = yes;
    CODE:      load = MAIN,       type = ro,  define = yes;
    RODATA:    load = MAIN,       type = ro;
    DATA:      load = MAIN,       type = rw;
    INIT:      load = MAIN,       type = rw,                optional = yes;
#Segments of game data
#Note the alignment    
    CLM_SEG_CHARSET1:  load = MAIN, type = ro,                            align = $0400;
    CLM_SEG_CHARSET2:  load = MAIN, type = ro,                            align = $0400;
    CLM_SEG_CAVEDL:    load = MAIN, type = ro,                            align = $0400;
    CLM_SEG_CAVES:     load = MAIN, type = ro;

#BSS segment must be the last one,
#otherwise the RUN vector will not be generated correctly
    BSS:       load = MAIN,       type = bss, define = yes;
    AUTOSTRT:  load = TRAILER,    type = ro;
    
#Raster music tracker    
    CLM_SEG_RMTSONG:        load = RMTSONG, type = rw;
    CLM_SEG_RMTPLAYER:      load = RMTPLAYER, type = rw;

#PMG and screen memory. Nothe that the type is BSS. Uninitialized

    CLM_SEG_PMGAREA:        load = PMGAREA, type = bss;
    CLM_SEG_CAVESCREEN:     load = CAVESCREEN, type = bss;
    CLM_SEG_STATUSBARSCREEN: load = STATUSBARSCREEN, type = bss;
    
}
FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
