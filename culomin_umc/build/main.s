;
; File generated by cc65 v 2.18 - Git 08705a3
;
	.fopt		compiler,"cc65 v 2.18 - Git 08705a3"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_CLM_DATA_CAVES
	.import		_CLM_DATA_CHARSET1
	.import		_CLM_DATA_CHARSET2
	.import		_CLM_DATA_CAVEDL
	.import		_CLM_DATA_PMGAREA
	.import		_CLM_DATA_CAVESCREEN
	.import		_CLM_DATA_STATUSBARSCREEN
	.import		_get_tv
	.import		_clrscr
	.import		_kbhit
	.import		_gotoxy
	.import		_cputcxy
	.import		_cputsxy
	.import		_cprintf
	.import		_cgetc
	.import		_cursor
	.import		_revers
	.import		_memcpy
	.import		_memset
	.export		_doGame
	.export		_paintElement
	.export		_paintCave
	.export		_rebuildCaveElementArray
	.export		_pmgInit
	.export		_setMinerPos
	.export		_repaintMiner
	.export		_delay
	.export		_adjustGameSpeed
	.export		_enableDisplay
	.export		_disableDisplay
	.export		_enterCaveGraphicsMode
	.export		_enterTextMode
	.export		_displayCongratulations
	.export		_displayGameOver
	.export		_displayReturnToMenuScreen
	.export		_displayMainMenu
	.export		_displayPostLevelScreen
	.import		_rmtAllStop
	.import		_rmtSuspend
	.import		_rmtResume
	.import		_rmtSetVBI
	.import		_rmtRestoreVBI
	.export		_playSongLine
	.import		_rmtPlaySongLine
	.export		_playSFX
	.import		_rmtPlaySFX
	.import		_asmReboot
	.export		_moveLeft
	.export		_moveRight
	.export		_moveUp
	.export		_moveDown
	.export		_jumpUp
	.export		_fallDown
	.export		_handleHighJump
	.export		_updateStatusBar
	.export		_checkTreasure
	.export		_checkDeath
	.export		_maxCaveReached
	.export		_startingCave
	.export		_dmactlStore
	.export		_lives
	.export		_currentCave
	.export		_diamondsInCave
	.export		_diamondsCollected
	.export		_caveDeath
	.export		_caveAllPicked
	.export		_stayHere
	.export		_gameOverType
	.export		_gameSpeed
	.export		_gameType
	.export		_highScore
	.export		_currentScore
	.export		_menuDl1
	.export		_menuDl2
	.export		_x1
	.export		_y1
	.export		_i1
	.export		_i2
	.export		_z1
	.export		_caveElements
	.export		_caveBroken
	.export		_minerX
	.export		_minerY
	.export		_p0x
	.export		_p0y
	.export		_minerDataNormal
	.export		_minerDataJump
	.export		_trainingLiteral
	.export		_tvSystemString
	.export		_hijs
	.export		_hiJump
	.import		_mvDelay
	.import		_dliHandler
	.import		_colorStore1
	.import		_colorStore2
	.export		_minerData
	.export		_brokenSpeed
	.export		_hijumpSpeedA
	.export		_hijumpSpeedB
	.export		_controlDelay
	.export		_fallSpeed
	.import		_requestedSFXCode
	.import		_songLine
	.export		_passable
	.export		_notJump
	.export		_broken
	.export		_elem2CharMap
	.export		_main

.segment	"DATA"

_minerDataNormal:
	.byte	$3C
	.byte	$7E
	.byte	$5A
	.byte	$DB
	.byte	$FF
	.byte	$C3
	.byte	$66
	.byte	$3C
_minerDataJump:
	.byte	$3C
	.byte	$7E
	.byte	$5A
	.byte	$DB
	.byte	$FF
	.byte	$C3
	.byte	$7E
	.byte	$00
_trainingLiteral:
	.byte	$34
	.byte	$32
	.byte	$21
	.byte	$29
	.byte	$2E
	.byte	$29
	.byte	$2E
	.byte	$27
_minerData:
	.addr	_minerDataNormal
_passable:
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_notJump:
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_broken:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_elem2CharMap:
	.byte	$00
	.byte	$C0
	.byte	$C8
	.byte	$CA
	.byte	$C6
	.byte	$C4
	.byte	$DA
	.byte	$4E
	.byte	$C2
	.byte	$CC
	.byte	$54
	.byte	$56
	.byte	$58
	.byte	$E1
	.byte	$E3
	.byte	$E5
	.byte	$E7
	.byte	$E9
	.byte	$EB
	.byte	$ED
	.byte	$EF
	.byte	$50
	.byte	$52

.segment	"RODATA"

L05BE:
	.byte	$20,$20,$20,$20,$55,$4E,$44,$45,$52,$47,$52,$4F,$55,$4E,$44,$20
	.byte	$20,$4D,$41,$44,$4E,$45,$53,$53,$20,$43,$48,$41,$4C,$4C,$45,$4E
	.byte	$47,$45,$20,$20,$20,$20,$00
L05C3:
	.byte	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$42,$41,$48,$41,$20,$53
	.byte	$6F,$66,$74,$77,$61,$72,$65,$20,$32,$30,$32,$30,$20,$20,$20,$20
	.byte	$20,$20,$20,$20,$20,$20,$00
L05B9:
	.byte	$20,$20,$20,$20,$20,$20,$20,$43,$55,$52,$53,$45,$20,$4F,$46,$20
	.byte	$54,$48,$45,$20,$20,$4C,$4F,$53,$54,$20,$4D,$49,$4E,$45,$52,$20
	.byte	$20,$20,$20,$20,$20,$20,$00
L065D:
	.byte	$4E,$6F,$77,$20,$79,$6F,$75,$20,$73,$68,$6F,$75,$6C,$64,$20,$63
	.byte	$72,$65,$61,$74,$65,$20,$79,$6F,$75,$72,$20,$6F,$77,$6E,$20,$63
	.byte	$61,$76,$65,$73,$2E,$00
L05E6:
	.byte	$47,$75,$69,$64,$65,$20,$74,$68,$65,$20,$6D,$69,$6E,$65,$72,$20
	.byte	$74,$68,$72,$6F,$75,$67,$68,$20,$32,$37,$20,$64,$61,$6E,$67,$65
	.byte	$72,$6F,$75,$73,$00
L05F5:
	.byte	$54,$6F,$20,$6D,$61,$78,$69,$6D,$69,$7A,$65,$20,$79,$6F,$75,$72
	.byte	$20,$73,$63,$6F,$72,$65,$2C,$20,$63,$6F,$6D,$70,$6C,$65,$74,$65
	.byte	$20,$74,$68,$65,$00
L05EB:
	.byte	$63,$61,$76,$65,$73,$2E,$20,$41,$76,$6F,$69,$64,$20,$6F,$62,$73
	.byte	$74,$61,$63,$6C,$65,$73,$20,$61,$6E,$64,$20,$63,$6F,$6C,$6C,$65
	.byte	$63,$74,$00
L05FA:
	.byte	$63,$61,$76,$65,$73,$20,$71,$75,$69,$63,$6B,$6C,$79,$2C,$20,$6C
	.byte	$65,$61,$76,$65,$20,$62,$72,$6F,$6B,$65,$6E,$20,$72,$6F,$63,$6B
	.byte	$73,$00
L0658:
	.byte	$54,$68,$61,$6E,$6B,$20,$79,$6F,$75,$20,$66,$6F,$72,$20,$70,$6C
	.byte	$61,$79,$69,$6E,$67,$20,$74,$68,$69,$73,$20,$67,$61,$6D,$65,$2E
	.byte	$00
L05FF:
	.byte	$69,$6E,$74,$61,$63,$74,$2C,$20,$61,$6E,$64,$20,$64,$6F,$20,$6E
	.byte	$6F,$74,$20,$6C,$6F,$73,$65,$20,$6C,$69,$76,$65,$73,$2E,$00
L06C7:
	.byte	$54,$4F,$54,$41,$4C,$20,$53,$43,$4F,$52,$45,$20,$20,$20,$20,$20
	.byte	$20,$20,$20,$20,$20,$20,$20,$20,$20,$25,$30,$37,$6C,$64,$00
L06BF:
	.byte	$52,$65,$74,$75,$72,$6E,$69,$6E,$67,$20,$74,$6F,$20,$74,$68,$65
	.byte	$20,$6D,$61,$69,$6E,$20,$6D,$65,$6E,$75,$20,$2E,$2E,$2E,$00
L0699	:=	L06C7+0
L0796:
	.byte	$59,$6F,$75,$20,$61,$72,$65,$20,$61,$77,$61,$72,$64,$65,$64,$20
	.byte	$20,$65,$78,$74,$72,$61,$20,$6C,$69,$76,$65,$73,$00
L064E:
	.byte	$54,$68,$65,$20,$63,$75,$72,$73,$65,$20,$6F,$66,$20,$74,$68,$65
	.byte	$20,$6C,$6F,$73,$74,$20,$6D,$69,$6E,$65,$72,$00
L05F0:
	.byte	$61,$6C,$6C,$20,$64,$69,$61,$6D,$6F,$6E,$64,$73,$20,$69,$6E,$20
	.byte	$65,$61,$63,$68,$20,$63,$61,$76,$65,$2E,$00
L06E1:
	.byte	$43,$61,$76,$65,$20,$25,$30,$32,$64,$20,$63,$6F,$6D,$70,$6C,$65
	.byte	$74,$65,$64,$00
L0624:
	.byte	$48,$69,$67,$68,$20,$73,$63,$6F,$72,$65,$3A,$20,$25,$30,$37,$6C
	.byte	$64,$00
L074C:
	.byte	$42,$72,$6F,$6B,$65,$6E,$20,$72,$6F,$63,$6B,$73,$20,$6C,$65,$66
	.byte	$74,$00
L061D:
	.byte	$4C,$61,$73,$74,$20,$73,$63,$6F,$72,$65,$3A,$20,$25,$30,$37,$6C
	.byte	$64,$00
L0649:
	.byte	$43,$6F,$6E,$67,$72,$61,$74,$75,$6C,$61,$74,$69,$6F,$6E,$73,$20
	.byte	$21,$00
L0653:
	.byte	$68,$61,$73,$20,$62,$65,$65,$6E,$20,$62,$72,$6F,$6B,$65,$6E,$2E
	.byte	$00
L060E:
	.byte	$74,$6F,$20,$73,$74,$61,$72,$74,$20,$67,$61,$6D,$65,$00
L0691:
	.byte	$47,$41,$4D,$45,$20,$49,$53,$20,$4F,$56,$45,$52,$00
L0682:
	.byte	$74,$6F,$20,$63,$6F,$6E,$74,$69,$6E,$75,$65,$00
L07A9	:=	L0682+0
L0770:
	.byte	$54,$4F,$54,$41,$4C,$20,$53,$43,$4F,$52,$45,$00
L06B2	:=	L0682+0
L075D:
	.byte	$43,$41,$56,$45,$20,$53,$43,$4F,$52,$45,$00
L073B:
	.byte	$4C,$69,$76,$65,$73,$20,$6C,$65,$66,$74,$00
L0776	:=	L06C7+25
L0609:
	.byte	$50,$72,$65,$73,$73,$00
L06A4	:=	L0609+0
L0674	:=	L0609+0
L079B	:=	L0609+0
L0752:
	.byte	$25,$30,$35,$64,$00
L0730	:=	L0752+0
L0763	:=	L0752+0
L0604:
	.byte	$76,$31,$2E,$31,$00
L072A:
	.byte	$54,$69,$6D,$65,$00
L00B2:
	.byte	$4E,$54,$53,$43,$00
L067B:
	.byte	$46,$49,$52,$45,$00
L0741	:=	L0752+0
L07A2	:=	L067B+0
L06AB	:=	L067B+0
L00AE:
	.byte	$50,$41,$4C,$20,$00
L0615	:=	L067B+0
L0787:
	.byte	$2A,$00

.segment	"BSS"

_maxCaveReached:
	.res	1,$00
_startingCave:
	.res	1,$00
_dmactlStore:
	.res	1,$00
_lives:
	.res	1,$00
_currentCave:
	.res	1,$00
_diamondsInCave:
	.res	1,$00
_diamondsCollected:
	.res	1,$00
_caveDeath:
	.res	1,$00
_caveAllPicked:
	.res	1,$00
_stayHere:
	.res	1,$00
_gameOverType:
	.res	1,$00
_gameSpeed:
	.res	1,$00
_gameType:
	.res	1,$00
_highScore:
	.res	4,$00
_currentScore:
	.res	4,$00
_menuDl1:
	.res	1,$00
_menuDl2:
	.res	1,$00
_x1:
	.res	1,$00
_y1:
	.res	1,$00
_i1:
	.res	2,$00
_i2:
	.res	2,$00
_z1:
	.res	1,$00
_caveElements:
	.res	440,$00
_caveBroken:
	.res	440,$00
_minerX:
	.res	1,$00
_minerY:
	.res	1,$00
_p0x:
	.res	2,$00
_p0y:
	.res	2,$00
_tvSystemString:
	.res	2,$00
_hijs:
	.res	1,$00
_hiJump:
	.res	1,$00
_brokenSpeed:
	.res	1,$00
_hijumpSpeedA:
	.res	1,$00
_hijumpSpeedB:
	.res	1,$00
_controlDelay:
	.res	1,$00
_fallSpeed:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ doGame (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_doGame: near

.segment	"CODE"

	ldy     #$0C
	jsr     subysp
	lda     _startingCave
	sta     _currentCave
	lda     #$00
	sta     _currentScore
	sta     _currentScore+1
	sta     _currentScore+2
	sta     _currentScore+3
	lda     #$0C
	sta     _lives
L0132:	jsr     _enterCaveGraphicsMode
	lda     _currentCave
	jsr     pusha
	jsr     _rebuildCaveElementArray
	lda     #$00
	sta     _diamondsCollected
	lda     _currentCave
	and     #$03
	cmp     #$02
	bcs     L013B
	jsr     _get_tv
	cmp     #$01
	bne     L013F
	lda     #$0C
	sta     $02C5
	lda     #$86
	sta     $02C6
	lda     #$F2
	sta     $02C4
	lda     #$F4
	jmp     L0822
L013F:	lda     #$0C
	sta     $02C5
	lda     #$96
	sta     $02C6
	lda     #$32
	sta     $02C4
	lda     #$34
	jmp     L0822
L013B:	jsr     _get_tv
	cmp     #$01
	bne     L016B
	lda     #$0C
	sta     $02C5
	lda     #$B8
	sta     $02C6
	lda     #$54
	sta     $02C4
	lda     #$66
	jmp     L0822
L016B:	lda     #$0C
	sta     $02C5
	lda     #$D8
	sta     $02C6
	lda     #$54
	sta     $02C4
	lda     #$56
L0822:	sta     $02C7
	lda     $02C5
	sta     _colorStore1
	lda     $02C6
	sta     _colorStore2
	jsr     _paintCave
	jsr     _updateStatusBar
	lda     #>(_minerDataNormal)
	sta     _minerData+1
	lda     #<(_minerDataNormal)
	sta     _minerData
	lda     _minerX
	jsr     pusha
	lda     _minerY
	jsr     pusha
	jsr     _setMinerPos
	lda     #$01
	sta     _stayHere
	lda     #$00
	ldy     #$06
	sta     (sp),y
	sta     _caveDeath
	sta     _caveAllPicked
	tay
	sta     (sp),y
	ldy     #$05
	sta     (sp),y
	dey
	sta     (sp),y
	dey
	sta     (sp),y
	ldy     #$01
	sta     (sp),y
	tya
	ldy     #$09
	sta     (sp),y
	jsr     _enableDisplay
	lda     #$00
	sta     $0014
	sta     $0013
	jmp     L026D
L01C6:	lda     $D01F
	cmp     #$07
	beq     L0826
	cmp     #$06
	bne     L0825
	lda     #$00
	sta     _stayHere
	lda     #$01
	tay
	sta     (sp),y
	lda     #$00
	sta     $004D
	jmp     L083B
L0825:	lda     $D01F
	cmp     #$03
	bne     L0826
	lda     #$01
	sta     _caveDeath
	lda     #$00
	sta     _stayHere
	sta     $004D
	jmp     L01C7
L0826:	lda     _minerX
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	sta     ptr1
	txa
	adc     #>(_caveElements)
	sta     ptr1+1
	ldy     _minerY
	lda     (ptr1),y
	ldy     #$08
	sta     (sp),y
	lda     _minerX
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	sta     ptr1
	txa
	adc     #>(_caveElements)
	sta     ptr1+1
	ldx     #$00
	lda     _minerY
	jsr     incax1
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	ldy     #$09
	sta     (sp),y
	tay
	lda     _passable,y
	cmp     #$01
	bne     L01F0
	ldy     #$08
	lda     (sp),y
	cmp     #$07
	beq     L01F0
	iny
	lda     (sp),y
	cmp     #$07
	beq     L01F0
	ldy     #$07
	lda     (sp),y
	cmp     $0014
	beq     L0208
	dey
	lda     (sp),y
	clc
	adc     #$01
	sta     (sp),y
	lda     $0014
	iny
	sta     (sp),y
	dey
	lda     (sp),y
	cmp     _fallSpeed
	bne     L0208
	jsr     _fallDown
	ldy     #$05
	lda     (sp),y
	clc
	adc     #$01
	sta     (sp),y
	jsr     _checkDeath
	lda     #$00
	ldy     #$06
	sta     (sp),y
	dey
	lda     (sp),y
	cmp     #$07
	bcc     L0208
	lda     #$00
	sta     _stayHere
	lda     #$01
	sta     _caveDeath
	jmp     L026D
L0208:	ldy     #$04
	lda     (sp),y
	ora     #$04
	sta     (sp),y
	lda     #$00
	jmp     L0854
L01F0:	ldy     #$04
	lda     (sp),y
	and     #$03
	beq     L082A
	lda     #$02
	dey
	sta     (sp),y
	lda     #$00
L082A:	ldy     #$06
	sta     (sp),y
	dey
	sta     (sp),y
L0854:	dey
	sta     (sp),y
	ldy     #$09
	lda     (sp),y
	tay
	lda     _broken,y
	cmp     #$01
	jne     L0248
	lda     _minerY
	clc
	adc     #$01
	sta     _y1
	ldy     #$02
	lda     (sp),y
	cmp     $0014
	beq     L082B
	lda     _minerX
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveBroken)
	tay
	txa
	adc     #>(_caveBroken)
	tax
	tya
	clc
	adc     _y1
	bcc     L0817
	inx
L0817:	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     #$01
	jsr     staspidx
	lda     $0014
	ldy     #$02
	sta     (sp),y
L082B:	lda     _minerX
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveBroken)
	sta     ptr1
	txa
	adc     #>(_caveBroken)
	sta     ptr1+1
	ldy     _y1
	lda     (ptr1),y
	cmp     _brokenSpeed
	jne     L0248
	lda     _minerX
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveBroken)
	tay
	txa
	adc     #>(_caveBroken)
	tax
	tya
	clc
	adc     _y1
	bcc     L0819
	inx
L0819:	sta     ptr1
	stx     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
	ldy     #$09
	lda     (sp),y
	cmp     #$14
	bcs     L082C
	lda     _minerX
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	tay
	txa
	adc     #>(_caveElements)
	tax
	tya
	clc
	adc     _y1
	bcc     L081A
	inx
L081A:	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     #$01
	jsr     staspidx
	jmp     L0853
L082C:	lda     _minerX
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	tay
	txa
	adc     #>(_caveElements)
	tax
	tya
	clc
	adc     _y1
	bcc     L081C
	inx
L081C:	sta     ptr1
	stx     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
L0853:	lda     _minerX
	jsr     pusha
	lda     _y1
	jsr     pusha
	lda     _minerX
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	sta     ptr1
	txa
	adc     #>(_caveElements)
	sta     ptr1+1
	ldy     _y1
	lda     (ptr1),y
	jsr     pusha
	jsr     _paintElement
L0248:	ldy     #$09
	lda     (sp),y
	cmp     #$06
	bne     L082D
	lda     _minerX
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	sta     ptr1
	txa
	adc     #>(_caveElements)
	sta     ptr1+1
	ldx     #$00
	lda     _minerY
	jsr     incax1
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	sta     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
	lda     _minerX
	jsr     pusha
	lda     _minerY
	clc
	adc     #$01
	jsr     pusha
	lda     #$00
	jsr     pusha
	jsr     _paintElement
L082D:	lda     _mvDelay
	jne     L026D
	lda     $0278
	ldy     #$0B
	sta     (sp),y
	lda     $0284
	dey
	sta     (sp),y
	iny
	lda     (sp),y
	cmp     #$06
	beq     L0270
	cmp     #$07
	beq     L0270
	cmp     #$0A
	jeq     L02C1
	cmp     #$0B
	jeq     L02C1
	cmp     #$0D
	jeq     L0312
	cmp     #$0E
	jeq     L031C
	jmp     L083A
L0270:	dey
	lda     (sp),y
	bne     L0274
	dey
	lda     (sp),y
	tay
	lda     _notJump,y
	bne     L0274
	lda     #$12
	jsr     pusha
	jsr     _playSFX
	lda     #$00
	sta     $004D
	lda     #>(_minerDataJump)
	sta     _minerData+1
	lda     #<(_minerDataJump)
	sta     _minerData
	lda     #$00
	ldy     #$05
	sta     (sp),y
	jsr     _jumpUp
	tax
	jne     L026D
	lda     #$04
	jsr     pusha0
	jsr     _delay
	jsr     _jumpUp
	tax
	jne     L026D
	lda     #$04
	jsr     pusha0
	jsr     _delay
	jsr     _moveRight
	lda     #$04
	jsr     pusha0
	jsr     _delay
	jsr     _moveRight
	lda     #$04
	jsr     pusha0
	jsr     _delay
	jsr     _moveRight
	lda     #$04
	jsr     pusha0
	jsr     _delay
	jsr     _checkDeath
	lda     #>(_minerDataNormal)
	sta     _minerData+1
	lda     #<(_minerDataNormal)
	sta     _minerData
	jsr     _repaintMiner
	jmp     L026D
L0274:	ldy     #$04
	lda     (sp),y
	and     #$04
	cmp     #$04
	bne     L02A1
	lda     (sp),y
	and     #$02
	bne     L0832
	jsr     _moveRight
	tax
	beq     L0833
	ldy     #$04
	lda     (sp),y
	ora     #$02
	sta     (sp),y
	jmp     L0832
L02A1:	dey
	lda     (sp),y
	bne     L0831
	jsr     _moveRight
	jmp     L0832
L0831:	lda     (sp),y
	sec
	sbc     #$01
	sta     (sp),y
	lda     _controlDelay
	sta     _mvDelay
L0832:	lda     #$00
L0833:	sta     $004D
	jsr     _checkDeath
	jmp     L026D
L02C1:	dey
	lda     (sp),y
	bne     L02C5
	dey
	lda     (sp),y
	tay
	lda     _notJump,y
	bne     L02C5
	lda     #$12
	jsr     pusha
	jsr     _playSFX
	lda     #$00
	sta     $004D
	lda     #>(_minerDataJump)
	sta     _minerData+1
	lda     #<(_minerDataJump)
	sta     _minerData
	lda     #$00
	ldy     #$05
	sta     (sp),y
	jsr     _jumpUp
	tax
	jne     L026D
	lda     #$04
	jsr     pusha0
	jsr     _delay
	jsr     _jumpUp
	tax
	jne     L026D
	lda     #$04
	jsr     pusha0
	jsr     _delay
	jsr     _moveLeft
	lda     #$04
	jsr     pusha0
	jsr     _delay
	jsr     _moveLeft
	lda     #$04
	jsr     pusha0
	jsr     _delay
	jsr     _moveLeft
	lda     #$04
	jsr     pusha0
	jsr     _delay
	jsr     _checkDeath
	lda     #>(_minerDataNormal)
	sta     _minerData+1
	lda     #<(_minerDataNormal)
	sta     _minerData
	jsr     _repaintMiner
	jmp     L026D
L02C5:	ldy     #$04
	lda     (sp),y
	and     #$04
	cmp     #$04
	bne     L02F2
	lda     (sp),y
	and     #$01
	bne     L0838
	jsr     _moveLeft
	tax
	beq     L0839
	ldy     #$04
	lda     (sp),y
	ora     #$01
	sta     (sp),y
	jmp     L0838
L02F2:	dey
	lda     (sp),y
	bne     L0837
	jsr     _moveLeft
	jmp     L0838
L0837:	lda     (sp),y
	sec
	sbc     #$01
	sta     (sp),y
	lda     _controlDelay
	sta     _mvDelay
L0838:	lda     #$00
L0839:	sta     $004D
	jsr     _checkDeath
	jmp     L026D
L0312:	jsr     _moveDown
	lda     #$00
	sta     $004D
	jsr     _checkDeath
	jmp     L026D
L031C:	dey
	lda     (sp),y
	bne     L031D
	dey
	lda     (sp),y
	tay
	lda     _notJump,y
	bne     L026D
	ldy     #$05
	sta     (sp),y
	lda     #$12
	jsr     pusha
	jsr     _playSFX
	lda     #$00
	sta     $004D
	jsr     _handleHighJump
	jmp     L026D
L031D:	jsr     _moveUp
	lda     #$00
	sta     $004D
	jsr     _checkDeath
	jmp     L026D
L083A:	lda     #$00
	ldy     #$03
	sta     (sp),y
	sta     _mvDelay
L026D:	lda     _stayHere
	jne     L01C6
L01C7:	ldy     #$01
L083B:	lda     (sp),y
	beq     L033A
	lda     #$F8
	jsr     pusha
	lda     #$20
	jsr     pusha
	jsr     _setMinerPos
	lda     #$03
	sta     _gameOverType
	jmp     L0133
L033A:	lda     _caveAllPicked
	beq     L0342
	lda     #$F8
	jsr     pusha
	lda     #$20
	jsr     pusha
	jsr     _setMinerPos
	jsr     _enterTextMode
	lda     #$0C
	jsr     pusha
	jsr     _playSFX
	jsr     _displayPostLevelScreen
	inc     _currentCave
	lda     _currentCave
	cmp     #$1B
	bne     L083C
	lda     #$F8
	jsr     pusha
	lda     #$20
	jsr     pusha
	jsr     _setMinerPos
	lda     #$02
	sta     _gameOverType
	jmp     L0133
L083C:	lda     _currentCave
	sec
	sbc     _maxCaveReached
	jcc     L0132
	jeq     L0132
	lda     _currentCave
	sta     _maxCaveReached
	jmp     L0132
L0342:	lda     _caveDeath
	jeq     L0132
	ldy     #$04
	lda     (sp),y
	and     #$04
	cmp     #$04
	bne     L0364
	jmp     L083E
L083D:	inc     _minerY
	lda     _minerX
	jsr     pusha
	lda     _minerY
	jsr     pusha
	jsr     _setMinerPos
	lda     #$03
	jsr     pusha0
	jsr     _delay
L083E:	lda     _minerY
	cmp     #$16
	bcs     L0364
	lda     _minerX
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	sta     ptr1
	txa
	adc     #>(_caveElements)
	sta     ptr1+1
	ldx     #$00
	lda     _minerY
	jsr     incax1
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	beq     L083D
L0364:	lda     #$F8
	jsr     pusha
	lda     #$20
	jsr     pusha
	jsr     _setMinerPos
	lda     _minerX
	jsr     pusha
	lda     _minerY
	jsr     pusha
	lda     #$15
	jsr     pusha
	jsr     _paintElement
	lda     #$0E
	jsr     pusha
	jsr     _playSFX
	lda     #$0F
	jsr     pusha0
	jsr     _delay
	lda     _minerX
	jsr     pusha
	lda     _minerY
	jsr     pusha
	lda     #$16
	jsr     pusha
	jsr     _paintElement
	lda     #$0F
	jsr     pusha0
	jsr     _delay
	lda     _minerX
	jsr     pusha
	lda     _minerY
	jsr     pusha
	lda     #$15
	jsr     pusha
	jsr     _paintElement
	lda     #$05
	jsr     pusha0
	jsr     _delay
	lda     _lives
	bne     L0841
	lda     #$01
	sta     _gameOverType
	jmp     L0133
L0841:	dec     _lives
	jmp     L0132
L0133:	ldy     #$0C
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ paintElement (unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_paintElement: near

.segment	"CODE"

	ldy     #$01
	lda     (sp),y
	jsr     pusha0
	lda     #$28
	jsr     tosumula0
	clc
	adc     #<(_CLM_DATA_CAVESCREEN)
	sta     ptr1
	txa
	adc     #>(_CLM_DATA_CAVESCREEN)
	sta     ptr1+1
	ldx     #$00
	ldy     #$02
	lda     (sp),y
	asl     a
	bcc     L0856
	inx
	clc
L0856:	adc     ptr1
	sta     _i2
	txa
	adc     ptr1+1
	sta     _i2+1
	ldy     #$00
	lda     (sp),y
	tay
	lda     _elem2CharMap,y
	sta     _z1
	lda     _i2+1
	sta     ptr1+1
	lda     _i2
	sta     ptr1
	lda     _z1
	ldy     #$00
	sta     (ptr1),y
	lda     _i2
	ldx     _i2+1
	jsr     incax1
	sta     ptr1
	stx     ptr1+1
	lda     _z1
	clc
	adc     #$01
	sta     (ptr1),y
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ paintCave (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_paintCave: near

.segment	"CODE"

	jsr     decsp2
	lda     #<(_CLM_DATA_CAVESCREEN)
	ldx     #>(_CLM_DATA_CAVESCREEN)
	jsr     pushax
	lda     #$00
	ldy     #$02
L0858:	sta     (sp),y
	cmp     #$16
	bcs     L03AB
	lda     #$00
	iny
L0857:	sta     (sp),y
	cmp     #$14
	bcs     L03AC
	lda     (sp),y
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	sta     ptr1
	txa
	adc     #>(_caveElements)
	sta     ptr1+1
	ldy     #$02
	lda     (sp),y
	tay
	lda     (ptr1),y
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_elem2CharMap)
	sta     ptr1+1
	ldy     #<(_elem2CharMap)
	lda     (ptr1),y
	sta     _z1
	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	lda     _z1
	ldy     #$00
	sta     (ptr1),y
	ldx     #$00
	lda     #$01
	jsr     addeq0sp
	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	lda     _z1
	clc
	adc     #$01
	ldy     #$00
	sta     (ptr1),y
	ldx     #$00
	lda     #$01
	jsr     addeq0sp
	ldy     #$03
	clc
	lda     #$01
	adc     (sp),y
	jmp     L0857
L03AC:	dey
	clc
	lda     #$01
	adc     (sp),y
	jmp     L0858
L03AB:	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ rebuildCaveElementArray (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_rebuildCaveElementArray: near

.segment	"CODE"

	jsr     decsp2
	jsr     push0
	jsr     decsp4
	ldy     #$08
	lda     (sp),y
	and     #$01
	beq     L03C8
	lda     #>(_CLM_DATA_CHARSET2)
	jmp     L085B
L03C8:	lda     #>(_CLM_DATA_CHARSET1)
L085B:	sta     $02F4
	lda     #<(_CLM_DATA_CAVES)
	ldx     #>(_CLM_DATA_CAVES)
	ldy     #$02
	jsr     staxysp
	ldy     #$08
	lda     (sp),y
	jsr     pusha0
	lda     #$DE
	jsr     tosumula0
	ldy     #$02
	jsr     addeqysp
	lda     #$00
	sta     _diamondsInCave
	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     _minerY
	ldy     #$03
	jsr     ldaxysp
	jsr     incax1
	ldy     #$02
	jsr     staxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     _minerX
	ldy     #$03
	jsr     ldaxysp
	jsr     incax1
	ldy     #$02
	jsr     staxysp
	lda     #$00
	tay
L085D:	sta     (sp),y
	cmp     #$16
	jcs     L03E9
	tya
	iny
L085C:	sta     (sp),y
	cmp     #$14
	jcs     L03EA
	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	ldy     #$06
	sta     (sp),y
	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	and     #$0F
	ldy     #$07
	sta     (sp),y
	ldx     #$00
	txa
L0860:	ldy     #$04
	jsr     staxysp
	cmp     #$02
	txa
	sbc     #$00
	bvc     L040A
	eor     #$80
L040A:	bpl     L0404
	lda     #$06
	jsr     leaa0sp
	ldy     #$04
	clc
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	cmp     #$0E
	beq     L085E
	cmp     #$0F
	beq     L041B
	jmp     L0405
L085E:	inc     _diamondsInCave
	lda     #$06
	jsr     leaa0sp
	ldy     #$04
	clc
	adc     (sp),y
	pha
	txa
	iny
	adc     (sp),y
	tax
	pla
	jsr     pushax
	lda     _diamondsInCave
	jsr     pusha0
	lda     #$03
	jsr     tosumoda0
	ldy     #$0A
	jsr     incaxy
	ldy     #$00
	jsr     staspidx
	jmp     L0405
L041B:	lda     #$06
	jsr     leaa0sp
	ldy     #$04
	clc
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     #$0D
	ldy     #$00
	sta     (ptr1),y
L0405:	ldy     #$05
	jsr     ldaxysp
	jsr     incax1
	jmp     L0860
L0404:	ldy     #$01
	lda     (sp),y
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	sta     ptr1
	txa
	adc     #>(_caveElements)
	sta     ptr1+1
	ldy     #$00
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0859
	inx
L0859:	sta     ptr1
	stx     ptr1+1
	ldy     #$06
	lda     (sp),y
	ldy     #$00
	sta     (ptr1),y
	iny
	ldx     #$00
	lda     (sp),y
	jsr     incax1
	jsr     pushax
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	sta     ptr1
	txa
	adc     #>(_caveElements)
	sta     ptr1+1
	ldy     #$00
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L085A
	inx
L085A:	sta     ptr1
	stx     ptr1+1
	ldy     #$07
	lda     (sp),y
	ldy     #$00
	sta     (ptr1),y
	ldy     #$03
	jsr     ldaxysp
	jsr     incax1
	ldy     #$02
	jsr     staxysp
	ldy     #$01
	clc
	lda     #$02
	adc     (sp),y
	jmp     L085C
L03EA:	dey
	clc
	lda     #$01
	adc     (sp),y
	jmp     L085D
L03E9:	lda     #<(_caveBroken)
	ldx     #>(_caveBroken)
	jsr     pushax
	ldx     #$01
	lda     #$B8
	jsr     __bzero
	ldy     #$09
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ pmgInit (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pmgInit: near

.segment	"CODE"

	ldx     #>(_CLM_DATA_PMGAREA)
	stx     $D407
	lda     #$3E
	sta     $022F
	lda     #<(_CLM_DATA_PMGAREA)
	ldx     #>(_CLM_DATA_PMGAREA)
	jsr     pushax
	ldx     #$08
	lda     #$00
	jsr     __bzero
	lda     #$02
	sta     $D01D
	jsr     _get_tv
	cmp     #$01
	bne     L0445
	lda     #$A8
	jmp     L0861
L0445:	lda     #$C8
L0861:	sta     $02C0
	lda     #$00
	sta     _p0x
	sta     _p0x+1
	lda     _p0x
	sta     $D000
	lda     #$00
	sta     _p0y
	sta     _p0y+1
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ setMinerPos (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setMinerPos: near

.segment	"CODE"

	ldy     #$01
	ldx     #$00
	lda     (sp),y
	jsr     aslax3
	ldy     #$30
	jsr     incaxy
	sta     _p0x
	stx     _p0x+1
	lda     _p0y
	ldx     _p0y+1
	jsr     pushax
	lda     #<(_CLM_DATA_PMGAREA)
	ldx     #>(_CLM_DATA_PMGAREA)
	jsr     swapstk
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	clc
	adc     ptr1
	pha
	lda     #$04
	adc     ptr1+1
	tax
	pla
	jsr     pushax
	ldx     #$00
	lda     #$08
	jsr     __bzero
	ldx     #$00
	lda     (sp,x)
	jsr     aslax3
	ldy     #$20
	jsr     incaxy
	sta     _p0y
	stx     _p0y+1
	lda     _p0x
	sta     $D000
	lda     _p0y
	ldx     _p0y+1
	jsr     pushax
	lda     #<(_CLM_DATA_PMGAREA)
	ldx     #>(_CLM_DATA_PMGAREA)
	jsr     swapstk
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	clc
	adc     ptr1
	pha
	lda     #$04
	adc     ptr1+1
	tax
	pla
	jsr     pushax
	lda     _minerData
	ldx     _minerData+1
	jsr     pushax
	ldx     #$00
	lda     #$08
	jsr     _memcpy
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ repaintMiner (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_repaintMiner: near

.segment	"CODE"

	ldx     #$00
	lda     _minerY
	jsr     aslax3
	ldy     #$20
	jsr     incaxy
	jsr     pushax
	lda     #<(_CLM_DATA_PMGAREA)
	ldx     #>(_CLM_DATA_PMGAREA)
	jsr     swapstk
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	clc
	adc     ptr1
	pha
	lda     #$04
	adc     ptr1+1
	tax
	pla
	jsr     pushax
	lda     _minerData
	ldx     _minerData+1
	jsr     pushax
	ldx     #$00
	lda     #$08
	jmp     _memcpy

.endproc

; ---------------------------------------------------------------
; void __near__ delay (unsigned int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_delay: near

.segment	"CODE"

	jsr     push0
L0865:	jsr     stax0sp
	ldy     #$02
	cmp     (sp),y
	txa
	iny
	sbc     (sp),y
	bcs     L047B
	lda     $0014
	jsr     pusha
	ldy     #$00
L0864:	lda     (sp),y
	cmp     $0014
	beq     L0864
	jsr     incsp1
	jsr     ldax0sp
	jsr     incax1
	jmp     L0865
L047B:	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ adjustGameSpeed (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_adjustGameSpeed: near

.segment	"CODE"

	ldy     #$00
	lda     (sp),y
	cmp     #$01
	bne     L0867
	lda     #$0E
	sta     _brokenSpeed
	lda     #$05
	sta     _hijumpSpeedA
	lda     #$11
	sta     _hijumpSpeedB
	lda     #$07
	sta     _controlDelay
	lda     #$03
	jmp     L0866
L0867:	lda     #$11
	sta     _brokenSpeed
	lda     #$06
	sta     _hijumpSpeedA
	lda     #$14
	sta     _hijumpSpeedB
	lda     #$09
	sta     _controlDelay
	lda     #$04
L0866:	sta     _fallSpeed
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ enableDisplay (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enableDisplay: near

.segment	"CODE"

	lda     #$3E
	sta     $022F
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ disableDisplay (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_disableDisplay: near

.segment	"CODE"

	lda     #$00
	sta     $022F
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enterCaveGraphicsMode (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enterCaveGraphicsMode: near

.segment	"CODE"

	lda     #$00
	sta     $022F
	lda     #$01
	jsr     pusha0
	jsr     _delay
	lda     #<(_CLM_DATA_CAVEDL)
	sta     $0230
	ldx     #>(_CLM_DATA_CAVEDL)
	stx     $0231
	lda     #<(_dliHandler)
	sta     $0200
	ldx     #>(_dliHandler)
	stx     $0201
	lda     #$C0
	sta     $D40E
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enterTextMode (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enterTextMode: near

.segment	"CODE"

	lda     #$00
	sta     $022F
	lda     #$01
	jsr     pusha0
	jsr     _delay
	lda     #$60
	sta     $D40E
	lda     _menuDl1
	sta     $0230
	lda     _menuDl2
	sta     $0231
	lda     #$0E
	sta     $02C5
	jsr     _get_tv
	cmp     #$01
	bne     L07D3
	lda     #$30
	jmp     L0868
L07D3:	lda     #$32
L0868:	sta     $02C6
	lda     #$E0
	sta     $02F4
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ displayCongratulations (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_displayCongratulations: near

.segment	"CODE"

	jsr     _clrscr
	lda     #$02
	jsr     pusha
	lda     #$04
	jsr     pusha
	lda     #<(L0649)
	ldx     #>(L0649)
	jsr     _cputsxy
	lda     #$02
	jsr     pusha
	lda     #$06
	jsr     pusha
	lda     #<(L064E)
	ldx     #>(L064E)
	jsr     _cputsxy
	lda     #$02
	jsr     pusha
	lda     #$07
	jsr     pusha
	lda     #<(L0653)
	ldx     #>(L0653)
	jsr     _cputsxy
	lda     #$02
	jsr     pusha
	lda     #$0B
	jsr     pusha
	lda     #<(L0658)
	ldx     #>(L0658)
	jsr     _cputsxy
	lda     #$02
	jsr     pusha
	lda     #$0C
	jsr     pusha
	lda     #<(L065D)
	ldx     #>(L065D)
	jsr     _cputsxy
	jsr     _enableDisplay
	lda     #$32
	jsr     pusha0
	jsr     _delay
	lda     #$00
	sta     _x1
L0869:	lda     _x1
	cmp     #$03
	bcs     L086A
	lda     #$10
	jsr     pusha
	jsr     _playSFX
	lda     #$32
	jsr     pusha0
	jsr     _delay
	inc     _x1
	jmp     L0869
L086A:	lda     #$64
	jsr     pusha0
	jsr     _delay
	lda     #$02
	jsr     pusha
	lda     #$14
	jsr     pusha
	lda     #<(L0674)
	ldx     #>(L0674)
	jsr     _cputsxy
	lda     #$01
	jsr     _revers
	lda     #$08
	jsr     pusha
	lda     #$14
	jsr     pusha
	lda     #<(L067B)
	ldx     #>(L067B)
	jsr     _cputsxy
	lda     #$00
	jsr     _revers
	lda     #$0D
	jsr     pusha
	lda     #$14
	jsr     pusha
	lda     #<(L0682)
	ldx     #>(L0682)
	jsr     _cputsxy
	lda     #$0A
	jsr     pusha0
	jsr     _delay
L0686:	lda     $0284
	bne     L0686
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ displayGameOver (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_displayGameOver: near

.segment	"CODE"

	jsr     _clrscr
	lda     #$0E
	jsr     pusha
	lda     #$08
	jsr     pusha
	lda     #<(L0691)
	ldx     #>(L0691)
	jsr     _cputsxy
	lda     #$01
	jsr     _revers
	lda     #$04
	jsr     pusha
	lda     #$0B
	jsr     _gotoxy
	lda     #<(L0699)
	ldx     #>(L0699)
	jsr     pushax
	lda     _currentScore+3
	sta     sreg+1
	lda     _currentScore+2
	sta     sreg
	ldx     _currentScore+1
	lda     _currentScore
	jsr     pusheax
	ldy     #$06
	jsr     _cprintf
	lda     #$00
	jsr     _revers
	jsr     _enableDisplay
	lda     #$96
	jsr     pusha0
	jsr     _delay
	lda     #$09
	jsr     pusha
	lda     #$0E
	jsr     pusha
	lda     #<(L06A4)
	ldx     #>(L06A4)
	jsr     _cputsxy
	lda     #$01
	jsr     _revers
	lda     #$0F
	jsr     pusha
	lda     #$0E
	jsr     pusha
	lda     #<(L06AB)
	ldx     #>(L06AB)
	jsr     _cputsxy
	lda     #$00
	jsr     _revers
	lda     #$14
	jsr     pusha
	lda     #$0E
	jsr     pusha
	lda     #<(L06B2)
	ldx     #>(L06B2)
	jsr     _cputsxy
L06B4:	lda     $0284
	bne     L06B4
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ displayReturnToMenuScreen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_displayReturnToMenuScreen: near

.segment	"CODE"

	jsr     _clrscr
	lda     #$05
	jsr     pusha
	lda     #$08
	jsr     pusha
	lda     #<(L06BF)
	ldx     #>(L06BF)
	jsr     _cputsxy
	lda     #$01
	jsr     _revers
	lda     #$04
	jsr     pusha
	lda     #$0B
	jsr     _gotoxy
	lda     #<(L06C7)
	ldx     #>(L06C7)
	jsr     pushax
	lda     _currentScore+3
	sta     sreg+1
	lda     _currentScore+2
	sta     sreg
	ldx     _currentScore+1
	lda     _currentScore
	jsr     pusheax
	ldy     #$06
	jsr     _cprintf
	lda     #$00
	jsr     _revers
	jsr     _enableDisplay
	lda     #$7D
	jsr     pusha0
	jmp     _delay

.endproc

; ---------------------------------------------------------------
; void __near__ displayMainMenu (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_displayMainMenu: near

.segment	"CODE"

	jsr     decsp1
	jsr     _clrscr
	lda     #$00
	jsr     _cursor
	lda     #$01
	jsr     _revers
	lda     #$01
	jsr     pusha
	jsr     pusha
	lda     #<(L05B9)
	ldx     #>(L05B9)
	jsr     _cputsxy
	lda     #$01
	jsr     pusha
	lda     #$02
	jsr     pusha
	lda     #<(L05BE)
	ldx     #>(L05BE)
	jsr     _cputsxy
	lda     #$01
	jsr     pusha
	lda     #$03
	jsr     pusha
	lda     #<(L05C3)
	ldx     #>(L05C3)
	jsr     _cputsxy
	lda     #$00
	jsr     _revers
	lda     #$01
	ldy     #$00
L086B:	sta     (sp),y
	cmp     #$27
	bcs     L05C8
	lda     (sp),y
	jsr     pusha
	lda     #$00
	jsr     pusha
	lda     #$12
	jsr     _cputcxy
	ldy     #$00
	lda     (sp),y
	jsr     pusha
	lda     #$04
	jsr     pusha
	lda     #$12
	jsr     _cputcxy
	ldy     #$00
	lda     (sp),y
	jsr     pusha
	lda     #$0A
	jsr     pusha
	lda     #$12
	jsr     _cputcxy
	ldy     #$00
	lda     (sp),y
	jsr     pusha
	lda     #$0E
	jsr     pusha
	lda     #$12
	jsr     _cputcxy
	ldy     #$00
	lda     (sp),y
	jsr     pusha
	lda     #$16
	jsr     pusha
	lda     #$12
	jsr     _cputcxy
	ldy     #$00
	clc
	lda     #$01
	adc     (sp),y
	jmp     L086B
L05C8:	lda     #$02
	jsr     pusha
	lda     #$0F
	jsr     pusha
	lda     #<(L05E6)
	ldx     #>(L05E6)
	jsr     _cputsxy
	lda     #$02
	jsr     pusha
	lda     #$10
	jsr     pusha
	lda     #<(L05EB)
	ldx     #>(L05EB)
	jsr     _cputsxy
	lda     #$02
	jsr     pusha
	lda     #$11
	jsr     pusha
	lda     #<(L05F0)
	ldx     #>(L05F0)
	jsr     _cputsxy
	lda     #$02
	jsr     pusha
	lda     #$13
	jsr     pusha
	lda     #<(L05F5)
	ldx     #>(L05F5)
	jsr     _cputsxy
	lda     #$02
	jsr     pusha
	lda     #$14
	jsr     pusha
	lda     #<(L05FA)
	ldx     #>(L05FA)
	jsr     _cputsxy
	lda     #$02
	jsr     pusha
	lda     #$15
	jsr     pusha
	lda     #<(L05FF)
	ldx     #>(L05FF)
	jsr     _cputsxy
	lda     #$23
	jsr     pusha
	lda     #$17
	jsr     pusha
	lda     #<(L0604)
	ldx     #>(L0604)
	jsr     _cputsxy
	lda     #$02
	jsr     pusha
	lda     #$08
	jsr     pusha
	lda     #<(L0609)
	ldx     #>(L0609)
	jsr     _cputsxy
	lda     #$0D
	jsr     pusha
	lda     #$08
	jsr     pusha
	lda     #<(L060E)
	ldx     #>(L060E)
	jsr     _cputsxy
	lda     #$01
	jsr     _revers
	lda     #$08
	jsr     pusha
	jsr     pusha
	lda     #<(L0615)
	ldx     #>(L0615)
	jsr     _cputsxy
	lda     #$00
	jsr     _revers
	lda     #$02
	jsr     pusha
	lda     #$0B
	jsr     _gotoxy
	lda     #<(L061D)
	ldx     #>(L061D)
	jsr     pushax
	lda     _currentScore+3
	sta     sreg+1
	lda     _currentScore+2
	sta     sreg
	ldx     _currentScore+1
	lda     _currentScore
	jsr     pusheax
	ldy     #$06
	jsr     _cprintf
	lda     #$02
	jsr     pusha
	lda     #$0C
	jsr     _gotoxy
	lda     #<(L0624)
	ldx     #>(L0624)
	jsr     pushax
	lda     _highScore+3
	sta     sreg+1
	lda     _highScore+2
	sta     sreg
	ldx     _highScore+1
	lda     _highScore
	jsr     pusheax
	ldy     #$06
	jsr     _cprintf
	lda     #$16
	jsr     pusha
	lda     #$0B
	jsr     pusha
	lda     _tvSystemString
	ldx     _tvSystemString+1
	jsr     _cputsxy
	jsr     _enableDisplay
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ displayPostLevelScreen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_displayPostLevelScreen: near

.segment	"CODE"

	ldx     $0013
	lda     #$00
	clc
	adc     $0014
	bcc     L0877
	inx
L0877:	jsr     pushax
	ldy     #$12
	jsr     subysp
	jsr     _get_tv
	cmp     #$01
	bne     L06D5
	ldx     #$00
	lda     #$10
	jmp     L0878
L06D5:	ldx     #$00
	lda     #$14
L0878:	jsr     stax0sp
	jsr     _clrscr
	lda     #$0C
	jsr     pusha
	lda     #$02
	jsr     _gotoxy
	lda     #<(L06E1)
	ldx     #>(L06E1)
	jsr     pushax
	ldx     #$00
	lda     _currentCave
	jsr     incax1
	jsr     pushax
	ldy     #$04
	jsr     _cprintf
	jsr     _enableDisplay
	lda     _currentCave
	cmp     #$0D
	bcc     L086F
	ldx     #$46
	lda     #$50
	jmp     L0879
L086F:	lda     _currentCave
	cmp     #$05
	bcc     L06EA
	ldx     #$2A
	lda     #$30
	jmp     L0879
L06EA:	ldx     #$1C
	lda     #$20
L0879:	ldy     #$08
	jsr     staxysp
	ldy     #$13
	jsr     ldaxysp
	sec
	ldy     #$08
	sbc     (sp),y
	sta     tmp1
	txa
	iny
	sbc     (sp),y
	ora     tmp1
	bcc     L0870
	beq     L0870
	ldx     #$00
	txa
	jmp     L087A
L0870:	jsr     ldaxysp
	sec
	ldy     #$12
	sbc     (sp),y
	pha
	txa
	iny
	sbc     (sp),y
	tax
	pla
	jsr     shrax1
L087A:	ldy     #$10
	jsr     staxysp
	lda     _lives
	jsr     pusha0
	lda     #$64
	jsr     tosumula0
	ldy     #$0C
	jsr     staxysp
	ldx     #$00
	txa
	ldy     #$0E
	jsr     staxysp
	ldy     #$06
	jsr     staxysp
L06FD:	ldy     #$07
	lda     (sp),y
	cmp     #$00
	bne     L0704
	dey
	lda     (sp),y
	cmp     #$14
L0704:	jcs     L06FE
	ldx     #$00
	txa
	ldy     #$04
	jsr     staxysp
L0706:	ldy     #$05
	lda     (sp),y
	cmp     #$00
	bne     L070D
	dey
	lda     (sp),y
	cmp     #$16
L070D:	bcs     L06FF
	ldy     #$09
	jsr     pushwysp
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	sta     ptr1
	txa
	adc     #>(_caveElements)
	sta     ptr1+1
	ldy     #$05
	jsr     ldaxysp
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	ldx     #$00
	ldy     #$02
	jsr     staxysp
	cmp     #$0D
	bcc     L0708
	ldy     #$03
	lda     (sp),y
	cmp     #$00
	bne     L0718
	dey
	lda     (sp),y
	cmp     #$15
L0718:	bcs     L0708
	lda     #$14
	jsr     pusha0
	ldy     #$05
	jsr     ldaxysp
	jsr     tossubax
	jsr     incax1
	ldy     #$0E
	jsr     addeqysp
L0708:	ldy     #$04
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	jmp     L0706
L06FF:	ldy     #$06
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	jmp     L06FD
L06FE:	ldy     #$0F
	jsr     ldaxysp
	jsr     shlax2
	ldy     #$0E
	jsr     staxysp
	ldy     #$13
	jsr     pushwysp
	ldy     #$0F
	jsr     ldaxysp
	jsr     tosaddax
	jsr     pushax
	ldy     #$11
	jsr     ldaxysp
	jsr     tosaddax
	ldy     #$0A
	jsr     staxysp
	jsr     axulong
	ldy     #<(_currentScore)
	sty     ptr1
	ldy     #>(_currentScore)
	jsr     laddeq
	jsr     ldax0sp
	jsr     shlax1
	jsr     pushax
	jsr     _delay
	lda     #$04
	jsr     pusha
	lda     #$06
	jsr     pusha
	lda     #<(L072A)
	ldx     #>(L072A)
	jsr     _cputsxy
	lda     #$1E
	jsr     pusha
	lda     #$06
	jsr     _gotoxy
	lda     #<(L0730)
	ldx     #>(L0730)
	jsr     pushax
	ldy     #$15
	jsr     pushwysp
	ldy     #$04
	jsr     _cprintf
	lda     #$14
	jsr     pusha
	jsr     _playSFX
	jsr     pushw0sp
	jsr     _delay
	lda     #$04
	jsr     pusha
	lda     #$08
	jsr     pusha
	lda     #<(L073B)
	ldx     #>(L073B)
	jsr     _cputsxy
	lda     #$1E
	jsr     pusha
	lda     #$08
	jsr     _gotoxy
	lda     #<(L0741)
	ldx     #>(L0741)
	jsr     pushax
	ldy     #$11
	jsr     pushwysp
	ldy     #$04
	jsr     _cprintf
	lda     #$14
	jsr     pusha
	jsr     _playSFX
	jsr     pushw0sp
	jsr     _delay
	lda     #$04
	jsr     pusha
	lda     #$0A
	jsr     pusha
	lda     #<(L074C)
	ldx     #>(L074C)
	jsr     _cputsxy
	lda     #$1E
	jsr     pusha
	lda     #$0A
	jsr     _gotoxy
	lda     #<(L0752)
	ldx     #>(L0752)
	jsr     pushax
	ldy     #$13
	jsr     pushwysp
	ldy     #$04
	jsr     _cprintf
	lda     #$14
	jsr     pusha
	jsr     _playSFX
	jsr     pushw0sp
	jsr     _delay
	lda     #$04
	jsr     pusha
	lda     #$0C
	jsr     pusha
	lda     #<(L075D)
	ldx     #>(L075D)
	jsr     _cputsxy
	lda     #$1E
	jsr     pusha
	lda     #$0C
	jsr     _gotoxy
	lda     #<(L0763)
	ldx     #>(L0763)
	jsr     pushax
	ldy     #$0F
	jsr     pushwysp
	ldy     #$04
	jsr     _cprintf
	lda     #$14
	jsr     pusha
	jsr     _playSFX
	jsr     pushw0sp
	jsr     _delay
	lda     #$01
	jsr     _revers
	lda     #$04
	jsr     pusha
	lda     #$0F
	jsr     pusha
	lda     #<(L0770)
	ldx     #>(L0770)
	jsr     _cputsxy
	lda     #$1C
	jsr     pusha
	lda     #$0F
	jsr     _gotoxy
	lda     #<(L0776)
	ldx     #>(L0776)
	jsr     pushax
	lda     _currentScore+3
	sta     sreg+1
	lda     _currentScore+2
	sta     sreg
	ldx     _currentScore+1
	lda     _currentScore
	jsr     pusheax
	ldy     #$06
	jsr     _cprintf
	lda     #$00
	jsr     _revers
	lda     #$14
	jsr     pusha
	jsr     _playSFX
	jsr     pushw0sp
	jsr     _delay
	lda     _currentScore+3
	sta     sreg+1
	lda     _currentScore+2
	sta     sreg
	ldx     _currentScore+1
	lda     _currentScore
	jsr     pusheax
	lda     _highScore+3
	sta     sreg+1
	lda     _highScore+2
	sta     sreg
	ldx     _highScore+1
	lda     _highScore
	jsr     tosugteax
	beq     L0780
	lda     _currentScore+3
	sta     sreg+1
	lda     _currentScore+2
	sta     sreg
	ldx     _currentScore+1
	lda     _currentScore
	sta     _highScore
	stx     _highScore+1
	ldy     sreg
	sty     _highScore+2
	ldy     sreg+1
	sty     _highScore+3
	lda     #$25
	jsr     pusha
	lda     #$0F
	jsr     pusha
	lda     #<(L0787)
	ldx     #>(L0787)
	jsr     _cputsxy
L0780:	lda     _currentCave
	cmp     #$0D
	bne     L0789
	lda     _lives
	cmp     #$0C
	bcs     L0789
	lda     #$05
	clc
	adc     _lives
	sta     _lives
	cmp     #$0D
	bcc     L078F
	lda     #$0C
	sta     _lives
L078F:	lda     #$06
	jsr     pusha
	lda     #$12
	jsr     pusha
	lda     #<(L0796)
	ldx     #>(L0796)
	jsr     _cputsxy
L0789:	lda     #$09
	jsr     pusha
	lda     #$14
	jsr     pusha
	lda     #<(L079B)
	ldx     #>(L079B)
	jsr     _cputsxy
	lda     #$01
	jsr     _revers
	lda     #$0F
	jsr     pusha
	lda     #$14
	jsr     pusha
	lda     #<(L07A2)
	ldx     #>(L07A2)
	jsr     _cputsxy
	lda     #$00
	jsr     _revers
	lda     #$14
	jsr     pusha
	jsr     pusha
	lda     #<(L07A9)
	ldx     #>(L07A9)
	jsr     _cputsxy
L0876:	lda     $0284
	beq     L0876
L07B1:	lda     $0284
	bne     L07B1
	ldy     #$14
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ playSongLine (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_playSongLine: near

.segment	"CODE"

	ldy     #$00
	lda     (sp),y
	sta     _songLine
	jsr     _rmtPlaySongLine
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ playSFX (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_playSFX: near

.segment	"CODE"

	ldy     #$00
	lda     (sp),y
	sta     _requestedSFXCode
	jsr     _rmtPlaySFX
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ moveLeft (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_moveLeft: near

.segment	"CODE"

	lda     _minerX
	beq     L087C
	ldx     #$00
	lda     _minerX
	jsr     decax1
	jsr     pushax
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	sta     ptr1
	txa
	adc     #>(_caveElements)
	sta     ptr1+1
	ldy     _minerY
	lda     (ptr1),y
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_passable)
	sta     ptr1+1
	ldy     #<(_passable)
	lda     (ptr1),y
	bne     L087D
L087C:	tax
	rts
L087D:	dec     _minerX
	lda     _minerX
	jsr     pusha
	lda     _minerY
	jsr     pusha
	jsr     _setMinerPos
	jsr     _checkTreasure
	lda     _controlDelay
	sta     _mvDelay
	ldx     #$00
	lda     #$01
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ moveRight (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_moveRight: near

.segment	"CODE"

	lda     _minerX
	cmp     #$13
	beq     L087F
	ldx     #$00
	lda     _minerX
	jsr     incax1
	jsr     pushax
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	sta     ptr1
	txa
	adc     #>(_caveElements)
	sta     ptr1+1
	ldy     _minerY
	lda     (ptr1),y
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_passable)
	sta     ptr1+1
	ldy     #<(_passable)
	lda     (ptr1),y
	bne     L0880
L087F:	ldx     #$00
	txa
	rts
L0880:	inc     _minerX
	lda     _minerX
	jsr     pusha
	lda     _minerY
	jsr     pusha
	jsr     _setMinerPos
	jsr     _checkTreasure
	lda     _controlDelay
	sta     _mvDelay
	ldx     #$00
	lda     #$01
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ moveUp (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_moveUp: near

.segment	"CODE"

	lda     _minerY
	bne     L0883
	rts
L0883:	lda     _minerX
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	sta     ptr1
	txa
	adc     #>(_caveElements)
	sta     ptr1+1
	ldx     #$00
	lda     _minerY
	jsr     decax1
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     _x1
	ldy     _x1
	lda     _passable,y
	beq     L04D8
	lda     _minerX
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	sta     ptr1
	txa
	adc     #>(_caveElements)
	sta     ptr1+1
	ldy     _minerY
	lda     (ptr1),y
	cmp     #$07
	bne     L04D8
	lda     _x1
	cmp     #$09
	bne     L0882
	lda     #$00
	sta     _stayHere
	lda     #$01
	sta     _caveDeath
	rts
L0882:	dec     _minerY
	lda     _minerX
	jsr     pusha
	lda     _minerY
	jsr     pusha
	jsr     _setMinerPos
	jsr     _checkTreasure
	lda     _controlDelay
	sta     _mvDelay
L04D8:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ moveDown (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_moveDown: near

.segment	"CODE"

	lda     _minerY
	cmp     #$15
	beq     L04B2
	lda     _minerX
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	sta     ptr1
	txa
	adc     #>(_caveElements)
	sta     ptr1+1
	ldx     #$00
	lda     _minerY
	jsr     incax1
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     _x1
	ldy     _x1
	lda     _passable,y
	cmp     #$01
	bne     L04B2
	inc     _minerY
	lda     _minerX
	jsr     pusha
	lda     _minerY
	jsr     pusha
	jsr     _setMinerPos
	jsr     _checkTreasure
	lda     _controlDelay
	sta     _mvDelay
L04B2:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ jumpUp (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_jumpUp: near

.segment	"CODE"

	ldx     #$00
	lda     _minerY
	beq     L0887
	lda     _minerX
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	sta     ptr1
	txa
	adc     #>(_caveElements)
	sta     ptr1+1
	ldx     #$00
	lda     _minerY
	jsr     decax1
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     _x1
	cmp     #$09
	bne     L04F3
	sty     _stayHere
	lda     #$01
	sta     _caveDeath
	ldx     #$00
	rts
L04F3:	ldy     _x1
	lda     _passable,y
	bne     L0886
	tax
	rts
L0886:	dec     _minerY
	lda     _minerX
	jsr     pusha
	lda     _minerY
	jsr     pusha
	jsr     _setMinerPos
	jsr     _checkTreasure
	ldx     #$00
	txa
L0887:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ fallDown (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fallDown: near

.segment	"CODE"

	lda     _minerY
	cmp     #$15
	beq     L04C4
	lda     _minerX
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	sta     ptr1
	txa
	adc     #>(_caveElements)
	sta     ptr1+1
	ldx     #$00
	lda     _minerY
	jsr     incax1
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     _x1
	ldy     _x1
	lda     _passable,y
	cmp     #$01
	bne     L04C4
	inc     _minerY
	lda     _minerX
	jsr     pusha
	lda     _minerY
	jsr     pusha
	jsr     _setMinerPos
	jmp     _checkTreasure
L04C4:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ handleHighJump (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_handleHighJump: near

.segment	"CODE"

	lda     _hijumpSpeedA
	jsr     pusha
	lda     #$00
	jsr     pusha
	jsr     decsp1
	lda     #>(_minerDataJump)
	sta     _minerData+1
	lda     #<(_minerDataJump)
	sta     _minerData
	lda     #$00
	sta     _y1
	lda     #$03
	sta     _hiJump
	lda     #$00
	sta     _mvDelay
	jmp     L088C
L0511:	jsr     _jumpUp
	tax
	beq     L0543
	jmp     L0512
L0889:	lda     _mvDelay
	bne     L0523
	lda     $0278
	sta     _hijs
	cmp     #$06
	beq     L0535
	cmp     #$07
	beq     L0535
	cmp     #$0A
	beq     L0527
	cmp     #$0B
	bne     L088A
L0527:	lda     _y1
	bne     L0523
	jsr     _moveLeft
	tax
	beq     L0523
	lda     #$01
	sta     _y1
	jmp     L0523
L0535:	lda     _y1
	bne     L0523
	jsr     _moveRight
	tax
	beq     L0523
	lda     #$01
	sta     _y1
	jmp     L0523
L088A:	lda     #$00
	sta     _mvDelay
L0523:	ldy     #$00
	lda     (sp),y
	cmp     $0014
	beq     L0543
	lda     $0014
	sta     (sp),y
	iny
	lda     (sp),y
	clc
	adc     #$01
	sta     (sp),y
L0543:	ldy     #$01
	lda     (sp),y
	iny
	cmp     (sp),y
	bcc     L0889
	lda     _hiJump
	cmp     #$02
	bne     L088B
	lda     _hijumpSpeedB
	sta     (sp),y
L088B:	lda     #$00
	dey
	sta     (sp),y
	dec     _hiJump
L088C:	lda     _hiJump
	jne     L0511
L0512:	jsr     _checkDeath
	lda     #>(_minerDataNormal)
	sta     _minerData+1
	lda     #<(_minerDataNormal)
	sta     _minerData
	jsr     _repaintMiner
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ updateStatusBar (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updateStatusBar: near

.segment	"CODE"

	lda     #>(_CLM_DATA_STATUSBARSCREEN)
	sta     ptr1+1
	lda     #<(_CLM_DATA_STATUSBARSCREEN)
	sta     ptr1
	lda     #$00
	ldy     #$27
L088D:	sta     (ptr1),y
	dey
	bpl     L088D
	lda     #$00
	sta     _y1
	tax
L088E:	lda     _y1
	cmp     _lives
	bcs     L088F
	clc
	adc     #<(_CLM_DATA_STATUSBARSCREEN)
	sta     ptr1
	lda     #$00
	adc     #>(_CLM_DATA_STATUSBARSCREEN)
	sta     ptr1+1
	lda     #$7B
	ldy     #$00
	sta     (ptr1),y
	inc     _y1
	jmp     L088E
L088F:	lda     _currentCave
	ldy     #$0D
	jsr     incaxy
	clc
	adc     #$01
	sta     _x1
	lda     #$0D
	sta     _y1
L0890:	lda     _y1
	cmp     _x1
	bcs     L059B
	clc
	adc     #<(_CLM_DATA_STATUSBARSCREEN)
	sta     ptr1
	lda     #$00
	adc     #>(_CLM_DATA_STATUSBARSCREEN)
	sta     ptr1+1
	lda     #$60
	ldy     #$00
	sta     (ptr1),y
	inc     _y1
	jmp     L0890
L059B:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ checkTreasure (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_checkTreasure: near

.segment	"CODE"

	lda     _minerX
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	sta     ptr1
	txa
	adc     #>(_caveElements)
	sta     ptr1+1
	ldy     _minerY
	lda     (ptr1),y
	sta     _x1
	cmp     #$0A
	lda     #$00
	tax
	bcc     L0899
	lda     _x1
	cmp     #$0D
	bcc     L0896
	txa
	rts
L0896:	inc     _diamondsCollected
	lda     _minerX
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	tay
	txa
	adc     #>(_caveElements)
	tax
	tya
	clc
	adc     _minerY
	bcc     L0892
	inx
L0892:	sta     ptr1
	stx     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
	lda     _minerX
	jsr     pusha
	lda     _minerY
	jsr     pusha
	lda     #$00
	jsr     pusha
	jsr     _paintElement
	lda     #$0A
	jsr     pusha
	jsr     _playSFX
	ldx     #$00
	lda     _diamondsInCave
	cmp     _diamondsCollected
	bne     L0897
	stx     _stayHere
	lda     #$01
	sta     _caveAllPicked
L0897:	lda     #$01
	rts
L0899:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ checkDeath (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_checkDeath: near

.segment	"CODE"

	lda     _minerX
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	sta     ptr1
	txa
	adc     #>(_caveElements)
	sta     ptr1+1
	ldx     #$00
	lda     _minerY
	jsr     incax1
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     _x1
	cmp     #$08
	bne     L055C
	sty     _stayHere
	lda     #$01
	sta     _caveDeath
L055C:	rts

.endproc

; ---------------------------------------------------------------
; int __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

	lda     #$00
	sta     $022F
	lda     #$01
	jsr     pusha0
	jsr     _delay
	lda     #$00
	sta     _gameOverType
	jsr     _clrscr
	lda     #$00
	sta     _maxCaveReached
	sta     _startingCave
	sta     _gameSpeed
	lda     #$01
	sta     $0244
	jsr     _get_tv
	cmp     #$01
	bne     L00AB
	lda     #>(L00AE)
	sta     _tvSystemString+1
	lda     #<(L00AE)
	jmp     L089B
L00AB:	lda     #>(L00B2)
	sta     _tvSystemString+1
	lda     #<(L00B2)
L089B:	sta     _tvSystemString
	jsr     _rmtSuspend
	jsr     _rmtSetVBI
	lda     $0230
	sta     _menuDl1
	lda     $0231
	sta     _menuDl2
	lda     #$00
	jsr     _cursor
	lda     #$01
	sta     $02DB
	jsr     _pmgInit
	lda     #$3E
	sta     $022F
L00CB:	jsr     _enterTextMode
	lda     _gameOverType
	cmp     #$01
	beq     L00D5
	cmp     #$02
	beq     L00DE
	cmp     #$03
	beq     L00E7
	jmp     L00D2
L00D5:	jsr     _rmtSuspend
	lda     #$0B
	jsr     pusha
	jsr     _playSongLine
	jsr     _rmtResume
	jsr     _displayGameOver
	jmp     L00D2
L00DE:	jsr     _rmtSuspend
	lda     #$0E
	jsr     pusha
	jsr     _playSongLine
	jsr     _rmtResume
	jsr     _displayCongratulations
	jmp     L00D2
L00E7:	jsr     _rmtSuspend
	lda     #$0E
	jsr     pusha
	jsr     _playSongLine
	jsr     _rmtResume
	jsr     _displayReturnToMenuScreen
L00D2:	jsr     _disableDisplay
	jsr     _rmtSuspend
	lda     #$00
	jsr     pusha
	jsr     _playSongLine
	jsr     _rmtResume
	lda     #$01
	jsr     pusha
	lda     #$06
	jsr     pusha
	jsr     _setMinerPos
	jsr     _displayMainMenu
	jsr     _kbhit
	tax
	beq     L089C
	jsr     _cgetc
L089C:	lda     $0284
	beq     L089C
	lda     $0278
	cmp     #$0F
	bne     L089C
L089E:	lda     $0284
	bne     L0109
	sta     $004D
	sta     _gameType
	jmp     L08A0
L0109:	jsr     _kbhit
	tax
	beq     L089E
	jsr     _cgetc
	sta     _x1
	cmp     #$1B
	bne     L089E
	jsr     _rmtAllStop
	jsr     _rmtRestoreVBI
	jsr     _asmReboot
	ldx     #$00
	txa
	rts
L08A0:	sta     _gameOverType
	jsr     _get_tv
	jsr     pusha
	jsr     _adjustGameSpeed
	jsr     _rmtSuspend
	jsr     _rmtAllStop
	lda     #$0E
	jsr     pusha
	jsr     _playSongLine
	jsr     _rmtResume
	jsr     _doGame
	jmp     L00CB

.endproc

