;
; File generated by cc65 v 2.18 - Git 08705a3
;
	.fopt		compiler,"cc65 v 2.18 - Git 08705a3"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_CLM_DATA_CAVES
	.import		_CLM_DATA_CHARSET1
	.import		_CLM_DATA_CHARSET2
	.import		_CLM_DATA_CAVEDL
	.import		_CLM_DATA_PMGAREA
	.import		_CLM_DATA_CAVESCREEN
	.import		_CLM_DATA_STATUSBARSCREEN
	.import		_get_tv
	.import		_clrscr
	.import		_kbhit
	.import		_gotoxy
	.import		_cputcxy
	.import		_cputsxy
	.import		_cprintf
	.import		_cgetc
	.import		_cursor
	.import		_revers
	.import		_memcpy
	.import		_memset
	.export		_doGame
	.export		_paintElement
	.export		_paintCave
	.export		_rebuildCaveElementArray
	.export		_pmgInit
	.export		_setMinerPos
	.export		_repaintMiner
	.export		_delay
	.export		_adjustGameSpeed
	.export		_displayCongratulations
	.export		_displayGameOver
	.export		_displayReturnToMenuScreen
	.export		_setTextModeSettings
	.export		_displayMainMenu
	.export		_displayTrainingText
	.export		_displayGameSpeed
	.export		_displayStartingCave
	.import		_rmtAllStop
	.import		_rmtSuspend
	.import		_rmtResume
	.import		_rmtSetVBI
	.import		_rmtRestoreVBI
	.export		_playSongLine
	.import		_rmtPlaySongLine
	.export		_playSFX
	.import		_rmtPlaySFX
	.import		_asmReboot
	.export		_moveLeft
	.export		_moveRight
	.export		_moveUp
	.export		_moveDown
	.export		_jumpUp
	.export		_fallDown
	.export		_handleHighJump
	.export		_updateStatusBar
	.export		_checkTreasure
	.export		_checkDeath
	.export		_maxCaveReached
	.export		_startingCave
	.export		_dmactlStore
	.export		_lives
	.export		_currentCave
	.export		_diamondsInCave
	.export		_diamondsCollected
	.export		_caveDeath
	.export		_caveAllPicked
	.export		_stayHere
	.export		_gameOverType
	.export		_gameSpeed
	.export		_gameType
	.export		_menuDl1
	.export		_menuDl2
	.export		_x1
	.export		_y1
	.export		_i1
	.export		_i2
	.export		_z1
	.export		_caveElements
	.export		_caveBroken
	.export		_minerX
	.export		_minerY
	.export		_p0x
	.export		_p0y
	.export		_minerDataNormal
	.export		_minerDataJump
	.export		_trainingLiteral
	.export		_hijs
	.export		_hiJump
	.import		_mvDelay
	.import		_dliHandler
	.import		_colorStore1
	.import		_colorStore2
	.export		_minerData
	.export		_brokenSpeed
	.export		_hijumpSpeedA
	.export		_hijumpSpeedB
	.export		_controlDelay
	.export		_fallSpeed
	.import		_requestedSFXCode
	.import		_songLine
	.export		_passable
	.export		_notJump
	.export		_broken
	.export		_elem2CharMap
	.export		_main

.segment	"DATA"

_minerDataNormal:
	.byte	$3C
	.byte	$7E
	.byte	$5A
	.byte	$DB
	.byte	$FF
	.byte	$C3
	.byte	$66
	.byte	$3C
_minerDataJump:
	.byte	$3C
	.byte	$7E
	.byte	$5A
	.byte	$DB
	.byte	$FF
	.byte	$C3
	.byte	$7E
	.byte	$00
_trainingLiteral:
	.byte	$34
	.byte	$32
	.byte	$21
	.byte	$29
	.byte	$2E
	.byte	$29
	.byte	$2E
	.byte	$27
_minerData:
	.addr	_minerDataNormal
_passable:
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_notJump:
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_broken:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_elem2CharMap:
	.byte	$00
	.byte	$C0
	.byte	$C8
	.byte	$CA
	.byte	$C6
	.byte	$C4
	.byte	$DA
	.byte	$4E
	.byte	$C2
	.byte	$CC
	.byte	$54
	.byte	$56
	.byte	$58
	.byte	$E1
	.byte	$E3
	.byte	$E5
	.byte	$E7
	.byte	$E9
	.byte	$EB
	.byte	$ED
	.byte	$EF
	.byte	$50
	.byte	$52

.segment	"RODATA"

L07D5:
	.byte	$57,$68,$65,$6E,$20,$74,$68,$65,$20,$6D,$69,$6E,$65,$72,$20,$69
	.byte	$73,$20,$66,$61,$6C,$6C,$69,$6E,$67,$2C,$20,$68,$65,$20,$63,$61
	.byte	$6E,$20,$6D,$6F,$76,$65,$00
L062F:
	.byte	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$42,$41,$48,$41,$20,$53
	.byte	$6F,$66,$74,$77,$61,$72,$65,$20,$32,$30,$32,$30,$20,$20,$20,$20
	.byte	$20,$20,$20,$20,$20,$20,$00
L083F:
	.byte	$50,$72,$65,$73,$73,$20,$53,$54,$41,$52,$54,$20,$74,$6F,$20,$72
	.byte	$65,$74,$75,$72,$6E,$20,$74,$6F,$20,$74,$68,$65,$20,$6D,$61,$69
	.byte	$6E,$20,$6D,$65,$6E,$75,$00
L062A:
	.byte	$20,$20,$20,$20,$20,$20,$20,$43,$55,$52,$53,$45,$20,$4F,$46,$20
	.byte	$54,$48,$45,$20,$20,$4C,$4F,$53,$54,$20,$4D,$49,$4E,$45,$52,$20
	.byte	$20,$20,$20,$20,$20,$20,$00
L0817:
	.byte	$54,$68,$65,$20,$6D,$69,$6E,$65,$72,$20,$63,$61,$6E,$20,$6A,$75
	.byte	$6D,$70,$20,$6F,$6E,$6C,$79,$20,$77,$68,$65,$6E,$20,$74,$68,$65
	.byte	$72,$65,$20,$69,$73,$00
L07B2:
	.byte	$55,$73,$65,$20,$6A,$6F,$79,$73,$74,$69,$63,$6B,$20,$69,$6E,$20
	.byte	$70,$6F,$72,$74,$20,$31,$20,$74,$6F,$20,$63,$6F,$6E,$74,$72,$6F
	.byte	$6C,$20,$74,$68,$65,$00
L0835:
	.byte	$4C,$6F,$6E,$67,$20,$6A,$75,$6D,$70,$20,$74,$6F,$20,$74,$68,$65
	.byte	$20,$6C,$65,$66,$74,$20,$6F,$72,$20,$74,$6F,$20,$74,$68,$65,$20
	.byte	$72,$69,$67,$68,$74,$00
L071E:
	.byte	$4E,$6F,$77,$20,$79,$6F,$75,$20,$73,$68,$6F,$75,$6C,$64,$20,$63
	.byte	$72,$65,$61,$74,$65,$20,$79,$6F,$75,$72,$20,$6F,$77,$6E,$20,$63
	.byte	$61,$76,$65,$73,$2E,$00
L082B:
	.byte	$6F,$72,$20,$74,$6F,$20,$74,$68,$65,$20,$72,$69,$67,$68,$74,$20
	.byte	$6F,$6E,$63,$65,$20,$64,$75,$72,$69,$6E,$67,$20,$74,$68,$65,$20
	.byte	$6A,$75,$6D,$70,$00
L0826:
	.byte	$48,$69,$67,$68,$20,$6A,$75,$6D,$70,$20,$2D,$20,$59,$6F,$75,$20
	.byte	$63,$61,$6E,$20,$6D,$6F,$76,$65,$20,$74,$6F,$20,$74,$68,$65,$20
	.byte	$6C,$65,$66,$74,$00
L0652:
	.byte	$47,$75,$69,$64,$65,$20,$74,$68,$65,$20,$6D,$69,$6E,$65,$72,$20
	.byte	$74,$68,$72,$6F,$75,$67,$68,$20,$31,$33,$20,$64,$61,$6E,$67,$65
	.byte	$72,$6F,$75,$73,$00
L07CB:
	.byte	$4A,$6F,$79,$73,$74,$69,$63,$6B,$20,$64,$6F,$77,$6E,$20,$20,$2D
	.byte	$20,$4D,$6F,$76,$65,$20,$64,$6F,$77,$6E,$20,$28,$6C,$61,$64,$64
	.byte	$65,$72,$29,$00
L07C1:
	.byte	$4A,$6F,$79,$73,$74,$69,$63,$6B,$20,$72,$69,$67,$68,$74,$20,$2D
	.byte	$20,$4D,$6F,$76,$65,$20,$74,$6F,$20,$74,$68,$65,$20,$72,$69,$67
	.byte	$68,$74,$00
L0657:
	.byte	$63,$61,$76,$65,$73,$2E,$20,$41,$76,$6F,$69,$64,$20,$6F,$62,$73
	.byte	$74,$61,$63,$6C,$65,$73,$20,$61,$6E,$64,$20,$63,$6F,$6C,$6C,$65
	.byte	$63,$74,$00
L07C6:
	.byte	$4A,$6F,$79,$73,$74,$69,$63,$6B,$20,$75,$70,$20,$20,$20,$20,$2D
	.byte	$20,$4D,$6F,$76,$65,$20,$75,$70,$20,$28,$6C,$61,$64,$64,$65,$72
	.byte	$29,$00
L07BC:
	.byte	$4A,$6F,$79,$73,$74,$69,$63,$6B,$20,$6C,$65,$66,$74,$20,$20,$2D
	.byte	$20,$4D,$6F,$76,$65,$20,$74,$6F,$20,$74,$68,$65,$20,$6C,$65,$66
	.byte	$74,$00
L07DA:
	.byte	$74,$6F,$20,$74,$68,$65,$20,$6C,$65,$66,$74,$20,$61,$6E,$64,$20
	.byte	$74,$6F,$20,$74,$68,$65,$20,$72,$69,$67,$68,$74,$20,$6F,$6E,$63
	.byte	$65,$00
L07DF:
	.byte	$54,$68,$65,$20,$6D,$69,$6E,$65,$72,$20,$64,$69,$65,$73,$20,$77
	.byte	$68,$65,$6E,$20,$68,$65,$20,$66,$61,$6C,$6C,$73,$20,$74,$6F,$6F
	.byte	$20,$00
L07E9:
	.byte	$41,$76,$6F,$69,$64,$20,$73,$70,$69,$6B,$65,$73,$20,$2D,$20,$74
	.byte	$68,$65,$20,$6D,$69,$6E,$65,$72,$20,$63,$61,$6E,$20,$6A,$75,$6D
	.byte	$70,$00
L0719:
	.byte	$54,$68,$61,$6E,$6B,$20,$79,$6F,$75,$20,$66,$6F,$72,$20,$70,$6C
	.byte	$61,$79,$69,$6E,$67,$20,$74,$68,$69,$73,$20,$67,$61,$6D,$65,$2E
	.byte	$00
L07D0:
	.byte	$54,$68,$65,$20,$6D,$69,$6E,$65,$72,$20,$69,$73,$20,$61,$66,$66
	.byte	$65,$63,$74,$65,$64,$20,$62,$79,$20,$67,$72,$61,$76,$69,$74,$79
	.byte	$00
L083A:
	.byte	$50,$72,$65,$73,$73,$20,$4F,$50,$54,$49,$4F,$4E,$20,$74,$6F,$20
	.byte	$63,$6F,$6D,$6D,$69,$74,$20,$73,$75,$69,$63,$69,$64,$65,$00
L079F:
	.byte	$52,$65,$74,$75,$72,$6E,$69,$6E,$67,$20,$74,$6F,$20,$74,$68,$65
	.byte	$20,$6D,$61,$69,$6E,$20,$6D,$65,$6E,$75,$20,$2E,$2E,$2E,$00
L0830:
	.byte	$46,$49,$52,$45,$20,$2B,$20,$4A,$6F,$79,$73,$74,$69,$63,$6B,$20
	.byte	$6C,$65,$66,$74,$20,$6F,$72,$20,$72,$69,$67,$68,$74,$00
L081C:
	.byte	$61,$20,$72,$6F,$63,$6B,$20,$6F,$72,$20,$61,$20,$6C,$61,$64,$64
	.byte	$65,$72,$20,$75,$6E,$64,$65,$72,$20,$68,$69,$6D,$00
L070F:
	.byte	$54,$68,$65,$20,$63,$75,$72,$73,$65,$20,$6F,$66,$20,$74,$68,$65
	.byte	$20,$6C,$6F,$73,$74,$20,$6D,$69,$6E,$65,$72,$00
L065C:
	.byte	$61,$6C,$6C,$20,$64,$69,$61,$6D,$6F,$6E,$64,$73,$20,$69,$6E,$20
	.byte	$65,$61,$63,$68,$20,$63,$61,$76,$65,$2E,$00
L0852:
	.byte	$74,$6F,$20,$65,$6E,$74,$65,$72,$20,$74,$68,$65,$20,$74,$72,$61
	.byte	$69,$6E,$69,$6E,$67,$20,$63,$61,$76,$65,$00
L080D:
	.byte	$54,$6F,$20,$63,$6F,$75,$6E,$74,$65,$72,$61,$63,$74,$20,$74,$68
	.byte	$65,$20,$67,$72,$61,$76,$69,$74,$79,$2C,$00
L0694:
	.byte	$74,$6F,$20,$74,$6F,$67,$67,$6C,$65,$20,$67,$61,$6D,$65,$20,$73
	.byte	$70,$65,$65,$64,$3A,$00
L0686:
	.byte	$74,$6F,$20,$73,$65,$74,$20,$73,$74,$61,$72,$74,$69,$6E,$67,$20
	.byte	$63,$61,$76,$65,$3A,$00
L0812	:=	L07E9+15
L0821:
	.byte	$46,$49,$52,$45,$20,$2B,$20,$4A,$6F,$79,$73,$74,$69,$63,$6B,$20
	.byte	$75,$70,$00
L06A2:
	.byte	$74,$6F,$20,$73,$74,$61,$72,$74,$20,$74,$72,$61,$69,$6E,$69,$6E
	.byte	$67,$00
L070A:
	.byte	$43,$6F,$6E,$67,$72,$61,$74,$75,$6C,$61,$74,$69,$6F,$6E,$73,$20
	.byte	$21,$00
L0714:
	.byte	$68,$61,$73,$20,$62,$65,$65,$6E,$20,$62,$72,$6F,$6B,$65,$6E,$2E
	.byte	$00
L0801:
	.byte	$66,$6F,$72,$20,$6E,$65,$78,$74,$20,$70,$61,$67,$65,$00
L066B:
	.byte	$74,$6F,$20,$73,$74,$61,$72,$74,$20,$67,$61,$6D,$65,$00
L0767:
	.byte	$47,$41,$4D,$45,$20,$49,$53,$20,$4F,$56,$45,$52,$00
L0783:
	.byte	$74,$6F,$20,$63,$6F,$6E,$74,$69,$6E,$75,$65,$00
L0749	:=	L0783+0
L07EE:
	.byte	$6F,$76,$65,$72,$20,$74,$68,$65,$6D,$00
L06B3:
	.byte	$4E,$4F,$52,$4D,$41,$4C,$00
L06B9:
	.byte	$20,$20,$53,$4C,$4F,$57,$00
L07E4:
	.byte	$64,$65,$65,$70,$6C,$79,$00
L0666:
	.byte	$50,$72,$65,$73,$73,$00
L0844	:=	L0666+0
L07F3	:=	L0666+0
L073B	:=	L0666+0
L0775	:=	L0666+0
L07B7	:=	L070F+22
L0661:
	.byte	$76,$31,$2E,$35,$00
L0742:
	.byte	$46,$49,$52,$45,$00
L0672	:=	L0742+0
L07FA	:=	L0742+0
L084B	:=	L0742+0
L06F3:
	.byte	$25,$30,$32,$64,$00
L077C	:=	L0742+0
L0699:
	.byte	$4A,$53,$00
L0679	:=	L0699+0
L068B	:=	L0699+0

.segment	"BSS"

_maxCaveReached:
	.res	1,$00
_startingCave:
	.res	1,$00
_dmactlStore:
	.res	1,$00
_lives:
	.res	1,$00
_currentCave:
	.res	1,$00
_diamondsInCave:
	.res	1,$00
_diamondsCollected:
	.res	1,$00
_caveDeath:
	.res	1,$00
_caveAllPicked:
	.res	1,$00
_stayHere:
	.res	1,$00
_gameOverType:
	.res	1,$00
_gameSpeed:
	.res	1,$00
_gameType:
	.res	1,$00
_menuDl1:
	.res	1,$00
_menuDl2:
	.res	1,$00
_x1:
	.res	1,$00
_y1:
	.res	1,$00
_i1:
	.res	2,$00
_i2:
	.res	2,$00
_z1:
	.res	1,$00
_caveElements:
	.res	440,$00
_caveBroken:
	.res	440,$00
_minerX:
	.res	1,$00
_minerY:
	.res	1,$00
_p0x:
	.res	2,$00
_p0y:
	.res	2,$00
_hijs:
	.res	1,$00
_hiJump:
	.res	1,$00
_brokenSpeed:
	.res	1,$00
_hijumpSpeedA:
	.res	1,$00
_hijumpSpeedB:
	.res	1,$00
_controlDelay:
	.res	1,$00
_fallSpeed:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ doGame (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_doGame: near

.segment	"CODE"

	ldy     #$0E
	jsr     subysp
	lda     #$00
	sta     $022F
	lda     #$02
	jsr     pusha0
	jsr     _delay
	lda     #<(_CLM_DATA_CAVEDL)
	sta     $0230
	ldx     #>(_CLM_DATA_CAVEDL)
	stx     $0231
	lda     _gameType
	bne     L0888
	lda     _startingCave
	jmp     L0884
L0888:	lda     #$0D
L0884:	sta     _currentCave
	lda     #$04
	sta     _lives
	lda     #<(_dliHandler)
	ldx     #>(_dliHandler)
	jsr     stax0sp
	sta     $0200
	jsr     ldax0sp
	stx     $0201
	lda     #$C0
	sta     $D40E
L0889:	lda     #$00
L08A9:	sta     $022F
	lda     _currentCave
	jsr     pusha
	jsr     _rebuildCaveElementArray
	lda     #$00
	sta     _diamondsCollected
	lda     _currentCave
	and     #$03
	cmp     #$02
	bcs     L0199
	jsr     _get_tv
	cmp     #$01
	bne     L019D
	lda     #$0C
	sta     $02C5
	lda     #$86
	sta     $02C6
	lda     #$F2
	sta     $02C4
	lda     #$F4
	jmp     L0885
L019D:	lda     #$0C
	sta     $02C5
	lda     #$96
	sta     $02C6
	lda     #$32
	sta     $02C4
	lda     #$34
	jmp     L0885
L0199:	jsr     _get_tv
	cmp     #$01
	bne     L01C9
	lda     #$0C
	sta     $02C5
	lda     #$B8
	sta     $02C6
	lda     #$54
	sta     $02C4
	lda     #$66
	jmp     L0885
L01C9:	lda     #$0C
	sta     $02C5
	lda     #$D8
	sta     $02C6
	lda     #$54
	sta     $02C4
	lda     #$56
L0885:	sta     $02C7
	lda     $02C5
	sta     _colorStore1
	lda     $02C6
	sta     _colorStore2
	jsr     _paintCave
	jsr     _updateStatusBar
	lda     #>(_minerDataNormal)
	sta     _minerData+1
	lda     #<(_minerDataNormal)
	sta     _minerData
	lda     _minerX
	jsr     pusha
	lda     _minerY
	jsr     pusha
	jsr     _setMinerPos
	lda     #$01
	sta     _stayHere
	lda     #$00
	ldy     #$08
	sta     (sp),y
	sta     _caveDeath
	sta     _caveAllPicked
	ldy     #$02
	sta     (sp),y
	ldy     #$07
	sta     (sp),y
	dey
	sta     (sp),y
	dey
	sta     (sp),y
	ldy     #$03
	sta     (sp),y
	lda     #$01
	ldy     #$0B
	sta     (sp),y
	lda     #$3E
	sta     $022F
	jmp     L02C6
L021F:	lda     $D01F
	cmp     #$07
	beq     L088B
	cmp     #$06
	bne     L088A
	lda     #$00
	sta     _stayHere
	lda     #$01
	ldy     #$03
	sta     (sp),y
	lda     #$00
	sta     $004D
	jmp     L08A0
L088A:	lda     $D01F
	cmp     #$03
	bne     L088B
	lda     #$01
	sta     _caveDeath
	lda     #$00
	sta     _stayHere
	sta     $004D
	jmp     L0220
L088B:	lda     _minerX
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	sta     ptr1
	txa
	adc     #>(_caveElements)
	sta     ptr1+1
	ldy     _minerY
	lda     (ptr1),y
	ldy     #$0A
	sta     (sp),y
	lda     _minerX
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	sta     ptr1
	txa
	adc     #>(_caveElements)
	sta     ptr1+1
	ldx     #$00
	lda     _minerY
	jsr     incax1
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	ldy     #$0B
	sta     (sp),y
	tay
	lda     _passable,y
	cmp     #$01
	bne     L0249
	ldy     #$0A
	lda     (sp),y
	cmp     #$07
	beq     L0249
	iny
	lda     (sp),y
	cmp     #$07
	beq     L0249
	ldy     #$09
	lda     (sp),y
	cmp     $0014
	beq     L0261
	dey
	lda     (sp),y
	clc
	adc     #$01
	sta     (sp),y
	lda     $0014
	iny
	sta     (sp),y
	dey
	lda     (sp),y
	cmp     _fallSpeed
	bne     L0261
	jsr     _fallDown
	ldy     #$07
	lda     (sp),y
	clc
	adc     #$01
	sta     (sp),y
	jsr     _checkDeath
	lda     #$00
	ldy     #$08
	sta     (sp),y
	dey
	lda     (sp),y
	cmp     #$07
	bcc     L0261
	lda     #$00
	sta     _stayHere
	lda     #$01
	sta     _caveDeath
	jmp     L02C6
L0261:	ldy     #$06
	lda     (sp),y
	ora     #$04
	sta     (sp),y
	lda     #$00
	jmp     L08BB
L0249:	ldy     #$06
	lda     (sp),y
	and     #$03
	beq     L088F
	lda     #$02
	dey
	sta     (sp),y
	lda     #$00
L088F:	ldy     #$08
	sta     (sp),y
	dey
	sta     (sp),y
L08BB:	dey
	sta     (sp),y
	ldy     #$0B
	lda     (sp),y
	tay
	lda     _broken,y
	cmp     #$01
	jne     L02A1
	lda     _minerY
	clc
	adc     #$01
	sta     _y1
	ldy     #$04
	lda     (sp),y
	cmp     $0014
	beq     L0890
	lda     _minerX
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveBroken)
	tay
	txa
	adc     #>(_caveBroken)
	tax
	tya
	clc
	adc     _y1
	bcc     L0879
	inx
L0879:	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     #$01
	jsr     staspidx
	lda     $0014
	ldy     #$04
	sta     (sp),y
L0890:	lda     _minerX
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveBroken)
	sta     ptr1
	txa
	adc     #>(_caveBroken)
	sta     ptr1+1
	ldy     _y1
	lda     (ptr1),y
	cmp     _brokenSpeed
	jne     L02A1
	lda     _minerX
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveBroken)
	tay
	txa
	adc     #>(_caveBroken)
	tax
	tya
	clc
	adc     _y1
	bcc     L087B
	inx
L087B:	sta     ptr1
	stx     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
	ldy     #$0B
	lda     (sp),y
	cmp     #$14
	bcs     L0891
	lda     _minerX
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	tay
	txa
	adc     #>(_caveElements)
	tax
	tya
	clc
	adc     _y1
	bcc     L087C
	inx
L087C:	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     #$01
	jsr     staspidx
	jmp     L08BA
L0891:	lda     _minerX
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	tay
	txa
	adc     #>(_caveElements)
	tax
	tya
	clc
	adc     _y1
	bcc     L087E
	inx
L087E:	sta     ptr1
	stx     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
L08BA:	lda     _minerX
	jsr     pusha
	lda     _y1
	jsr     pusha
	lda     _minerX
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	sta     ptr1
	txa
	adc     #>(_caveElements)
	sta     ptr1+1
	ldy     _y1
	lda     (ptr1),y
	jsr     pusha
	jsr     _paintElement
L02A1:	ldy     #$0B
	lda     (sp),y
	cmp     #$06
	bne     L0892
	lda     _minerX
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	sta     ptr1
	txa
	adc     #>(_caveElements)
	sta     ptr1+1
	ldx     #$00
	lda     _minerY
	jsr     incax1
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	sta     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
	lda     _minerX
	jsr     pusha
	lda     _minerY
	clc
	adc     #$01
	jsr     pusha
	lda     #$00
	jsr     pusha
	jsr     _paintElement
L0892:	lda     _mvDelay
	jne     L02C6
	lda     $0278
	ldy     #$0D
	sta     (sp),y
	lda     $0284
	dey
	sta     (sp),y
	iny
	lda     (sp),y
	cmp     #$06
	beq     L02C9
	cmp     #$07
	beq     L02C9
	cmp     #$0A
	jeq     L031A
	cmp     #$0B
	jeq     L031A
	cmp     #$0D
	jeq     L036B
	cmp     #$0E
	jeq     L0375
	jmp     L089F
L02C9:	dey
	lda     (sp),y
	bne     L02CD
	dey
	lda     (sp),y
	tay
	lda     _notJump,y
	bne     L02CD
	lda     #$12
	jsr     pusha
	jsr     _playSFX
	lda     #$00
	sta     $004D
	lda     #>(_minerDataJump)
	sta     _minerData+1
	lda     #<(_minerDataJump)
	sta     _minerData
	lda     #$00
	ldy     #$07
	sta     (sp),y
	jsr     _jumpUp
	tax
	jne     L02C6
	lda     #$04
	jsr     pusha0
	jsr     _delay
	jsr     _jumpUp
	tax
	jne     L02C6
	lda     #$04
	jsr     pusha0
	jsr     _delay
	jsr     _moveRight
	lda     #$04
	jsr     pusha0
	jsr     _delay
	jsr     _moveRight
	lda     #$04
	jsr     pusha0
	jsr     _delay
	jsr     _moveRight
	lda     #$04
	jsr     pusha0
	jsr     _delay
	jsr     _checkDeath
	lda     #>(_minerDataNormal)
	sta     _minerData+1
	lda     #<(_minerDataNormal)
	sta     _minerData
	jsr     _repaintMiner
	jmp     L02C6
L02CD:	ldy     #$06
	lda     (sp),y
	and     #$04
	cmp     #$04
	bne     L02FA
	lda     (sp),y
	and     #$02
	bne     L0897
	jsr     _moveRight
	tax
	beq     L0898
	ldy     #$06
	lda     (sp),y
	ora     #$02
	sta     (sp),y
	jmp     L0897
L02FA:	dey
	lda     (sp),y
	bne     L0896
	jsr     _moveRight
	jmp     L0897
L0896:	lda     (sp),y
	sec
	sbc     #$01
	sta     (sp),y
	lda     _controlDelay
	sta     _mvDelay
L0897:	lda     #$00
L0898:	sta     $004D
	jsr     _checkDeath
	jmp     L02C6
L031A:	dey
	lda     (sp),y
	bne     L031E
	dey
	lda     (sp),y
	tay
	lda     _notJump,y
	bne     L031E
	lda     #$12
	jsr     pusha
	jsr     _playSFX
	lda     #$00
	sta     $004D
	lda     #>(_minerDataJump)
	sta     _minerData+1
	lda     #<(_minerDataJump)
	sta     _minerData
	lda     #$00
	ldy     #$07
	sta     (sp),y
	jsr     _jumpUp
	tax
	jne     L02C6
	lda     #$04
	jsr     pusha0
	jsr     _delay
	jsr     _jumpUp
	tax
	jne     L02C6
	lda     #$04
	jsr     pusha0
	jsr     _delay
	jsr     _moveLeft
	lda     #$04
	jsr     pusha0
	jsr     _delay
	jsr     _moveLeft
	lda     #$04
	jsr     pusha0
	jsr     _delay
	jsr     _moveLeft
	lda     #$04
	jsr     pusha0
	jsr     _delay
	jsr     _checkDeath
	lda     #>(_minerDataNormal)
	sta     _minerData+1
	lda     #<(_minerDataNormal)
	sta     _minerData
	jsr     _repaintMiner
	jmp     L02C6
L031E:	ldy     #$06
	lda     (sp),y
	and     #$04
	cmp     #$04
	bne     L034B
	lda     (sp),y
	and     #$01
	bne     L089D
	jsr     _moveLeft
	tax
	beq     L089E
	ldy     #$06
	lda     (sp),y
	ora     #$01
	sta     (sp),y
	jmp     L089D
L034B:	dey
	lda     (sp),y
	bne     L089C
	jsr     _moveLeft
	jmp     L089D
L089C:	lda     (sp),y
	sec
	sbc     #$01
	sta     (sp),y
	lda     _controlDelay
	sta     _mvDelay
L089D:	lda     #$00
L089E:	sta     $004D
	jsr     _checkDeath
	jmp     L02C6
L036B:	jsr     _moveDown
	lda     #$00
	sta     $004D
	jsr     _checkDeath
	jmp     L02C6
L0375:	dey
	lda     (sp),y
	bne     L0376
	dey
	lda     (sp),y
	tay
	lda     _notJump,y
	bne     L02C6
	ldy     #$07
	sta     (sp),y
	lda     #$12
	jsr     pusha
	jsr     _playSFX
	lda     #$00
	sta     $004D
	jsr     _handleHighJump
	jmp     L02C6
L0376:	jsr     _moveUp
	lda     #$00
	sta     $004D
	jsr     _checkDeath
	jmp     L02C6
L089F:	lda     #$00
	ldy     #$05
	sta     (sp),y
	sta     _mvDelay
L02C6:	lda     _stayHere
	jne     L021F
L0220:	ldy     #$03
L08A0:	lda     (sp),y
	beq     L0393
	lda     #$F8
	jsr     pusha
	lda     #$20
	jsr     pusha
	jsr     _setMinerPos
	lda     #$03
	sta     _gameOverType
	jmp     L018D
L0393:	lda     _caveAllPicked
	beq     L039B
	lda     _gameType
	cmp     #$01
	bne     L08A1
	lda     #$F8
	jsr     pusha
	lda     #$20
	jsr     pusha
	jsr     _setMinerPos
	lda     #$03
	sta     _gameOverType
	jmp     L018D
L08A1:	inc     _currentCave
	lda     _currentCave
	cmp     #$0D
	bne     L08A2
	lda     #$F8
	jsr     pusha
	lda     #$20
	jsr     pusha
	jsr     _setMinerPos
	lda     #$02
	sta     _gameOverType
	jmp     L018D
L08A2:	lda     _currentCave
	sec
	sbc     _maxCaveReached
	bcc     L03B1
	beq     L03B1
	lda     _currentCave
	sta     _maxCaveReached
L03B1:	lda     #$0C
	jsr     pusha
	jsr     _playSFX
	jmp     L0889
L039B:	lda     _caveDeath
	jeq     L08A9
	ldy     #$06
	lda     (sp),y
	and     #$04
	cmp     #$04
	bne     L03C1
	jmp     L08A4
L08A3:	inc     _minerY
	lda     _minerX
	jsr     pusha
	lda     _minerY
	jsr     pusha
	jsr     _setMinerPos
	lda     #$03
	jsr     pusha0
	jsr     _delay
L08A4:	lda     _minerY
	cmp     #$16
	bcs     L03C1
	lda     _minerX
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	sta     ptr1
	txa
	adc     #>(_caveElements)
	sta     ptr1+1
	ldx     #$00
	lda     _minerY
	jsr     incax1
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	beq     L08A3
L03C1:	lda     #$F8
	jsr     pusha
	lda     #$20
	jsr     pusha
	jsr     _setMinerPos
	lda     _minerX
	jsr     pusha
	lda     _minerY
	jsr     pusha
	lda     #$15
	jsr     pusha
	jsr     _paintElement
	lda     #$0E
	jsr     pusha
	jsr     _playSFX
	lda     #$0F
	jsr     pusha0
	jsr     _delay
	lda     _minerX
	jsr     pusha
	lda     _minerY
	jsr     pusha
	lda     #$16
	jsr     pusha
	jsr     _paintElement
	lda     #$0F
	jsr     pusha0
	jsr     _delay
	lda     _minerX
	jsr     pusha
	lda     _minerY
	jsr     pusha
	lda     #$15
	jsr     pusha
	jsr     _paintElement
	lda     #$05
	jsr     pusha0
	jsr     _delay
	lda     _lives
	bne     L08A7
	lda     #$01
	sta     _gameOverType
	jmp     L018D
L08A7:	dec     _lives
	jmp     L0889
L018D:	ldy     #$0E
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ paintElement (unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_paintElement: near

.segment	"CODE"

	ldy     #$01
	lda     (sp),y
	jsr     pusha0
	lda     #$28
	jsr     tosumula0
	clc
	adc     #<(_CLM_DATA_CAVESCREEN)
	sta     ptr1
	txa
	adc     #>(_CLM_DATA_CAVESCREEN)
	sta     ptr1+1
	ldx     #$00
	ldy     #$02
	lda     (sp),y
	asl     a
	bcc     L08BD
	inx
	clc
L08BD:	adc     ptr1
	sta     _i2
	txa
	adc     ptr1+1
	sta     _i2+1
	ldy     #$00
	lda     (sp),y
	tay
	lda     _elem2CharMap,y
	sta     _z1
	lda     _i2+1
	sta     ptr1+1
	lda     _i2
	sta     ptr1
	lda     _z1
	ldy     #$00
	sta     (ptr1),y
	lda     _i2
	ldx     _i2+1
	jsr     incax1
	sta     ptr1
	stx     ptr1+1
	lda     _z1
	clc
	adc     #$01
	sta     (ptr1),y
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ paintCave (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_paintCave: near

.segment	"CODE"

	lda     #$00
	sta     _y1
L08BF:	lda     _y1
	cmp     #$16
	bcs     L0407
	lda     #$00
	sta     _x1
L08C0:	lda     _x1
	cmp     #$14
	bcs     L08C1
	jsr     pusha
	lda     _y1
	jsr     pusha
	lda     _x1
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	sta     ptr1
	txa
	adc     #>(_caveElements)
	sta     ptr1+1
	ldy     _y1
	lda     (ptr1),y
	jsr     pusha
	jsr     _paintElement
	inc     _x1
	jmp     L08C0
L08C1:	inc     _y1
	jmp     L08BF
L0407:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ rebuildCaveElementArray (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_rebuildCaveElementArray: near

.segment	"CODE"

	jsr     decsp2
	jsr     push0
	jsr     decsp4
	ldy     #$08
	lda     (sp),y
	and     #$01
	beq     L041F
	lda     #>(_CLM_DATA_CHARSET2)
	jmp     L08C4
L041F:	lda     #>(_CLM_DATA_CHARSET1)
L08C4:	sta     $02F4
	lda     #<(_CLM_DATA_CAVES)
	ldx     #>(_CLM_DATA_CAVES)
	ldy     #$02
	jsr     staxysp
	ldy     #$02
	jsr     staxysp
	ldy     #$08
	lda     (sp),y
	jsr     pusha0
	lda     #$DE
	jsr     tosumula0
	ldy     #$02
	jsr     addeqysp
	lda     #$00
	sta     _diamondsInCave
	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     _minerY
	ldy     #$03
	jsr     ldaxysp
	jsr     incax1
	ldy     #$02
	jsr     staxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     _minerX
	ldy     #$03
	jsr     ldaxysp
	jsr     incax1
	ldy     #$02
	jsr     staxysp
	lda     #$00
	tay
L08CA:	sta     (sp),y
	cmp     #$16
	jcs     L0441
	tya
	iny
L08C5:	sta     (sp),y
	cmp     #$14
	jcs     L0442
	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	ldy     #$06
	sta     (sp),y
	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	and     #$0F
	ldy     #$07
	sta     (sp),y
	ldx     #$00
	txa
L08CB:	ldy     #$04
	jsr     staxysp
	cmp     #$02
	txa
	sbc     #$00
	bvc     L0462
	eor     #$80
L0462:	bpl     L045C
	lda     #$06
	jsr     leaa0sp
	ldy     #$04
	clc
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	cmp     #$0E
	beq     L08C8
	cmp     #$0F
	beq     L0473
	jmp     L045D
L08C8:	inc     _diamondsInCave
	lda     #$06
	jsr     leaa0sp
	ldy     #$04
	clc
	adc     (sp),y
	pha
	txa
	iny
	adc     (sp),y
	tax
	pla
	jsr     pushax
	lda     _diamondsInCave
	jsr     pusha0
	lda     #$03
	jsr     tosumoda0
	ldy     #$0A
	jsr     incaxy
	ldy     #$00
	jsr     staspidx
	jmp     L045D
L0473:	lda     #$06
	jsr     leaa0sp
	ldy     #$04
	clc
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     #$0D
	ldy     #$00
	sta     (ptr1),y
L045D:	ldy     #$05
	jsr     ldaxysp
	jsr     incax1
	jmp     L08CB
L045C:	ldy     #$01
	lda     (sp),y
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	sta     ptr1
	txa
	adc     #>(_caveElements)
	sta     ptr1+1
	ldy     #$00
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L08C2
	inx
L08C2:	sta     ptr1
	stx     ptr1+1
	ldy     #$06
	lda     (sp),y
	ldy     #$00
	sta     (ptr1),y
	iny
	ldx     #$00
	lda     (sp),y
	jsr     incax1
	jsr     pushax
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	sta     ptr1
	txa
	adc     #>(_caveElements)
	sta     ptr1+1
	ldy     #$00
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L08C3
	inx
L08C3:	sta     ptr1
	stx     ptr1+1
	ldy     #$07
	lda     (sp),y
	ldy     #$00
	sta     (ptr1),y
	ldy     #$03
	jsr     ldaxysp
	jsr     incax1
	ldy     #$02
	jsr     staxysp
	ldy     #$01
	clc
	lda     #$02
	adc     (sp),y
	jmp     L08C5
L0442:	dey
	lda     (sp),y
	clc
	adc     #$01
	jmp     L08CA
L0441:	lda     #<(_caveBroken)
	ldx     #>(_caveBroken)
	jsr     pushax
	ldx     #$01
	lda     #$B8
	jsr     __bzero
	ldy     #$09
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ pmgInit (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pmgInit: near

.segment	"CODE"

	ldx     #>(_CLM_DATA_PMGAREA)
	stx     $D407
	lda     #$3E
	sta     $022F
	lda     #<(_CLM_DATA_PMGAREA)
	ldx     #>(_CLM_DATA_PMGAREA)
	jsr     pushax
	ldx     #$08
	lda     #$00
	jsr     __bzero
	lda     #$02
	sta     $D01D
	jsr     _get_tv
	cmp     #$01
	bne     L049D
	lda     #$A8
	jmp     L08CC
L049D:	lda     #$C8
L08CC:	sta     $02C0
	lda     #$00
	sta     _p0x
	sta     _p0x+1
	lda     _p0x
	sta     $D000
	lda     #$00
	sta     _p0y
	sta     _p0y+1
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ setMinerPos (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setMinerPos: near

.segment	"CODE"

	ldy     #$01
	ldx     #$00
	lda     (sp),y
	jsr     aslax3
	ldy     #$30
	jsr     incaxy
	sta     _p0x
	stx     _p0x+1
	lda     _p0y
	ldx     _p0y+1
	jsr     pushax
	lda     #<(_CLM_DATA_PMGAREA)
	ldx     #>(_CLM_DATA_PMGAREA)
	jsr     swapstk
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	clc
	adc     ptr1
	pha
	lda     #$04
	adc     ptr1+1
	tax
	pla
	jsr     pushax
	ldx     #$00
	lda     #$08
	jsr     __bzero
	ldx     #$00
	lda     (sp,x)
	jsr     aslax3
	ldy     #$20
	jsr     incaxy
	sta     _p0y
	stx     _p0y+1
	lda     _p0x
	sta     $D000
	lda     _p0y
	ldx     _p0y+1
	jsr     pushax
	lda     #<(_CLM_DATA_PMGAREA)
	ldx     #>(_CLM_DATA_PMGAREA)
	jsr     swapstk
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	clc
	adc     ptr1
	pha
	lda     #$04
	adc     ptr1+1
	tax
	pla
	jsr     pushax
	lda     _minerData
	ldx     _minerData+1
	jsr     pushax
	ldx     #$00
	lda     #$08
	jsr     _memcpy
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ repaintMiner (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_repaintMiner: near

.segment	"CODE"

	ldx     #$00
	lda     _minerY
	jsr     aslax3
	ldy     #$20
	jsr     incaxy
	jsr     pushax
	lda     #<(_CLM_DATA_PMGAREA)
	ldx     #>(_CLM_DATA_PMGAREA)
	jsr     swapstk
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	clc
	adc     ptr1
	pha
	lda     #$04
	adc     ptr1+1
	tax
	pla
	jsr     pushax
	lda     _minerData
	ldx     _minerData+1
	jsr     pushax
	ldx     #$00
	lda     #$08
	jmp     _memcpy

.endproc

; ---------------------------------------------------------------
; void __near__ delay (unsigned int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_delay: near

.segment	"CODE"

	jsr     push0
L08D0:	jsr     stax0sp
	ldy     #$02
	cmp     (sp),y
	txa
	iny
	sbc     (sp),y
	bcs     L04D3
	lda     $0014
	jsr     pusha
	ldy     #$00
L08CF:	lda     (sp),y
	cmp     $0014
	beq     L08CF
	jsr     incsp1
	jsr     ldax0sp
	jsr     incax1
	jmp     L08D0
L04D3:	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ adjustGameSpeed (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_adjustGameSpeed: near

.segment	"CODE"

	ldy     #$01
	lda     (sp),y
	bne     L06BC
	dey
	lda     (sp),y
	cmp     #$01
	bne     L08D2
	lda     #$0E
	sta     _brokenSpeed
	lda     #$05
	sta     _hijumpSpeedA
	lda     #$11
	sta     _hijumpSpeedB
	lda     #$07
	sta     _controlDelay
	lda     #$03
	jmp     L08D1
L08D2:	lda     #$11
	sta     _brokenSpeed
	lda     #$06
	sta     _hijumpSpeedA
	lda     #$14
	sta     _hijumpSpeedB
	lda     #$09
	sta     _controlDelay
	lda     #$04
	jmp     L08D1
L06BC:	dey
	lda     (sp),y
	cmp     #$01
	bne     L08D3
	lda     #$15
	sta     _brokenSpeed
	lda     #$07
	sta     _hijumpSpeedA
	lda     #$16
	sta     _hijumpSpeedB
	lda     #$0C
	sta     _controlDelay
	lda     #$04
	jmp     L08D1
L08D3:	lda     #$19
	sta     _brokenSpeed
	lda     #$08
	sta     _hijumpSpeedA
	lda     #$1A
	sta     _hijumpSpeedB
	lda     #$0F
	sta     _controlDelay
	lda     #$05
L08D1:	sta     _fallSpeed
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ displayCongratulations (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_displayCongratulations: near

.segment	"CODE"

	lda     #$00
	sta     $022F
	lda     _menuDl1
	sta     $0230
	lda     _menuDl2
	sta     $0231
	jsr     _clrscr
	lda     #$02
	jsr     pusha
	lda     #$04
	jsr     pusha
	lda     #<(L070A)
	ldx     #>(L070A)
	jsr     _cputsxy
	lda     #$02
	jsr     pusha
	lda     #$06
	jsr     pusha
	lda     #<(L070F)
	ldx     #>(L070F)
	jsr     _cputsxy
	lda     #$02
	jsr     pusha
	lda     #$07
	jsr     pusha
	lda     #<(L0714)
	ldx     #>(L0714)
	jsr     _cputsxy
	lda     #$02
	jsr     pusha
	lda     #$0B
	jsr     pusha
	lda     #<(L0719)
	ldx     #>(L0719)
	jsr     _cputsxy
	lda     #$02
	jsr     pusha
	lda     #$0C
	jsr     pusha
	lda     #<(L071E)
	ldx     #>(L071E)
	jsr     _cputsxy
	jsr     _setTextModeSettings
	lda     #$3E
	sta     $022F
	lda     #$32
	jsr     pusha0
	jsr     _delay
	lda     #$00
	sta     _x1
L08D4:	lda     _x1
	cmp     #$03
	bcs     L08D5
	lda     #$10
	jsr     pusha
	jsr     _playSFX
	lda     #$32
	jsr     pusha0
	jsr     _delay
	inc     _x1
	jmp     L08D4
L08D5:	lda     #$64
	jsr     pusha0
	jsr     _delay
	lda     #$02
	jsr     pusha
	lda     #$14
	jsr     pusha
	lda     #<(L073B)
	ldx     #>(L073B)
	jsr     _cputsxy
	lda     #$01
	jsr     _revers
	lda     #$08
	jsr     pusha
	lda     #$14
	jsr     pusha
	lda     #<(L0742)
	ldx     #>(L0742)
	jsr     _cputsxy
	lda     #$00
	jsr     _revers
	lda     #$0D
	jsr     pusha
	lda     #$14
	jsr     pusha
	lda     #<(L0749)
	ldx     #>(L0749)
	jsr     _cputsxy
	lda     #$0A
	jsr     pusha0
	jsr     _delay
L074D:	lda     $0284
	bne     L074D
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ displayGameOver (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_displayGameOver: near

.segment	"CODE"

	lda     #$00
	sta     $022F
	lda     _menuDl1
	sta     $0230
	lda     _menuDl2
	sta     $0231
	jsr     _clrscr
	lda     #$0E
	jsr     pusha
	lda     #$0B
	jsr     pusha
	lda     #<(L0767)
	ldx     #>(L0767)
	jsr     _cputsxy
	jsr     _setTextModeSettings
	lda     #$3E
	sta     $022F
	lda     #$96
	jsr     pusha0
	jsr     _delay
	lda     #$09
	jsr     pusha
	lda     #$0D
	jsr     pusha
	lda     #<(L0775)
	ldx     #>(L0775)
	jsr     _cputsxy
	lda     #$01
	jsr     _revers
	lda     #$0F
	jsr     pusha
	lda     #$0D
	jsr     pusha
	lda     #<(L077C)
	ldx     #>(L077C)
	jsr     _cputsxy
	lda     #$00
	jsr     _revers
	lda     #$14
	jsr     pusha
	lda     #$0D
	jsr     pusha
	lda     #<(L0783)
	ldx     #>(L0783)
	jsr     _cputsxy
L0785:	lda     $0284
	bne     L0785
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ displayReturnToMenuScreen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_displayReturnToMenuScreen: near

.segment	"CODE"

	lda     #$00
	sta     $022F
	lda     _menuDl1
	sta     $0230
	lda     _menuDl2
	sta     $0231
	jsr     _clrscr
	lda     #$05
	jsr     pusha
	lda     #$0A
	jsr     pusha
	lda     #<(L079F)
	ldx     #>(L079F)
	jsr     _cputsxy
	jsr     _setTextModeSettings
	lda     #$3E
	sta     $022F
	lda     #$7D
	jsr     pusha0
	jmp     _delay

.endproc

; ---------------------------------------------------------------
; void __near__ setTextModeSettings (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setTextModeSettings: near

.segment	"CODE"

	lda     #$0E
	sta     $02C5
	jsr     _get_tv
	cmp     #$01
	bne     L0866
	lda     #$30
	jmp     L08D6
L0866:	lda     #$32
L08D6:	sta     $02C6
	lda     #$E0
	sta     $02F4
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ displayMainMenu (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_displayMainMenu: near

.segment	"CODE"

	jsr     decsp1
	lda     #$00
	sta     $022F
	lda     _menuDl1
	sta     $0230
	lda     _menuDl2
	sta     $0231
	jsr     _setTextModeSettings
	jsr     _clrscr
	lda     #$00
	jsr     _cursor
	lda     #$01
	jsr     _revers
	lda     #$01
	jsr     pusha
	jsr     pusha
	lda     #<(L062A)
	ldx     #>(L062A)
	jsr     _cputsxy
	lda     #$01
	jsr     pusha
	lda     #$02
	jsr     pusha
	lda     #<(L062F)
	ldx     #>(L062F)
	jsr     _cputsxy
	lda     #$00
	jsr     _revers
	lda     #$01
	ldy     #$00
L08D9:	sta     (sp),y
	cmp     #$27
	bcs     L0634
	lda     (sp),y
	jsr     pusha
	lda     #$00
	jsr     pusha
	lda     #$12
	jsr     _cputcxy
	ldy     #$00
	lda     (sp),y
	jsr     pusha
	lda     #$03
	jsr     pusha
	lda     #$12
	jsr     _cputcxy
	ldy     #$00
	lda     (sp),y
	jsr     pusha
	lda     #$16
	jsr     pusha
	lda     #$12
	jsr     _cputcxy
	ldy     #$00
	lda     (sp),y
	jsr     pusha
	lda     #$12
	jsr     pusha
	jsr     _cputcxy
	ldy     #$00
	lda     (sp),y
	jsr     pusha
	lda     #$0A
	jsr     pusha
	lda     #$12
	jsr     _cputcxy
	ldy     #$00
	lda     (sp),y
	clc
	adc     #$01
	jmp     L08D9
L0634:	lda     #$02
	jsr     pusha
	lda     #$13
	jsr     pusha
	lda     #<(L0652)
	ldx     #>(L0652)
	jsr     _cputsxy
	lda     #$02
	jsr     pusha
	lda     #$14
	jsr     pusha
	lda     #<(L0657)
	ldx     #>(L0657)
	jsr     _cputsxy
	lda     #$02
	jsr     pusha
	lda     #$15
	jsr     pusha
	lda     #<(L065C)
	ldx     #>(L065C)
	jsr     _cputsxy
	lda     #$23
	jsr     pusha
	lda     #$15
	jsr     pusha
	lda     #<(L0661)
	ldx     #>(L0661)
	jsr     _cputsxy
	lda     #$02
	jsr     pusha
	lda     #$08
	jsr     pusha
	lda     #<(L0666)
	ldx     #>(L0666)
	jsr     _cputsxy
	lda     #$0D
	jsr     pusha
	lda     #$08
	jsr     pusha
	lda     #<(L066B)
	ldx     #>(L066B)
	jsr     _cputsxy
	lda     #$01
	jsr     _revers
	lda     #$08
	jsr     pusha
	jsr     pusha
	lda     #<(L0672)
	ldx     #>(L0672)
	jsr     _cputsxy
	lda     #$00
	jsr     _revers
	lda     #$02
	jsr     pusha
	lda     #$0C
	jsr     pusha
	lda     #<(L0679)
	ldx     #>(L0679)
	jsr     _cputsxy
	lda     #$05
	jsr     pusha
	lda     #$0C
	jsr     pusha
	lda     #$1E
	jsr     _cputcxy
	lda     #$06
	jsr     pusha
	lda     #$0C
	jsr     pusha
	lda     #$1F
	jsr     _cputcxy
	lda     #$08
	jsr     pusha
	lda     #$0C
	jsr     pusha
	lda     #<(L0686)
	ldx     #>(L0686)
	jsr     _cputsxy
	lda     #$02
	jsr     pusha
	lda     #$0D
	jsr     pusha
	lda     #<(L068B)
	ldx     #>(L068B)
	jsr     _cputsxy
	lda     #$05
	jsr     pusha
	lda     #$0D
	jsr     pusha
	lda     #$1D
	jsr     _cputcxy
	lda     #$08
	jsr     pusha
	lda     #$0D
	jsr     pusha
	lda     #<(L0694)
	ldx     #>(L0694)
	jsr     _cputsxy
	lda     #$02
	jsr     pusha
	lda     #$0E
	jsr     pusha
	lda     #<(L0699)
	ldx     #>(L0699)
	jsr     _cputsxy
	lda     #$05
	jsr     pusha
	lda     #$0E
	jsr     pusha
	lda     #$1C
	jsr     _cputcxy
	lda     #$08
	jsr     pusha
	lda     #$0E
	jsr     pusha
	lda     #<(L06A2)
	ldx     #>(L06A2)
	jsr     _cputsxy
	jsr     _displayStartingCave
	jsr     _displayGameSpeed
	lda     #$3E
	sta     $022F
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ displayTrainingText (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_displayTrainingText: near

.segment	"CODE"

	jsr     _clrscr
	lda     #$F8
	jsr     pusha
	lda     #$20
	jsr     pusha
	jsr     _setMinerPos
	lda     #$01
	jsr     pusha
	jsr     pusha
	lda     #<(L07B2)
	ldx     #>(L07B2)
	jsr     _cputsxy
	lda     #$01
	jsr     pusha
	lda     #$02
	jsr     pusha
	lda     #<(L07B7)
	ldx     #>(L07B7)
	jsr     _cputsxy
	lda     #$01
	jsr     pusha
	lda     #$04
	jsr     pusha
	lda     #<(L07BC)
	ldx     #>(L07BC)
	jsr     _cputsxy
	lda     #$01
	jsr     pusha
	lda     #$05
	jsr     pusha
	lda     #<(L07C1)
	ldx     #>(L07C1)
	jsr     _cputsxy
	lda     #$01
	jsr     pusha
	lda     #$06
	jsr     pusha
	lda     #<(L07C6)
	ldx     #>(L07C6)
	jsr     _cputsxy
	lda     #$01
	jsr     pusha
	lda     #$07
	jsr     pusha
	lda     #<(L07CB)
	ldx     #>(L07CB)
	jsr     _cputsxy
	lda     #$01
	jsr     pusha
	lda     #$09
	jsr     pusha
	lda     #<(L07D0)
	ldx     #>(L07D0)
	jsr     _cputsxy
	lda     #$01
	jsr     pusha
	lda     #$0A
	jsr     pusha
	lda     #<(L07D5)
	ldx     #>(L07D5)
	jsr     _cputsxy
	lda     #$01
	jsr     pusha
	lda     #$0B
	jsr     pusha
	lda     #<(L07DA)
	ldx     #>(L07DA)
	jsr     _cputsxy
	lda     #$01
	jsr     pusha
	lda     #$0D
	jsr     pusha
	lda     #<(L07DF)
	ldx     #>(L07DF)
	jsr     _cputsxy
	lda     #$01
	jsr     pusha
	lda     #$0E
	jsr     pusha
	lda     #<(L07E4)
	ldx     #>(L07E4)
	jsr     _cputsxy
	lda     #$01
	jsr     pusha
	lda     #$10
	jsr     pusha
	lda     #<(L07E9)
	ldx     #>(L07E9)
	jsr     _cputsxy
	lda     #$01
	jsr     pusha
	lda     #$11
	jsr     pusha
	lda     #<(L07EE)
	ldx     #>(L07EE)
	jsr     _cputsxy
	lda     #$01
	jsr     pusha
	lda     #$17
	jsr     pusha
	lda     #<(L07F3)
	ldx     #>(L07F3)
	jsr     _cputsxy
	lda     #$01
	jsr     _revers
	lda     #$07
	jsr     pusha
	lda     #$17
	jsr     pusha
	lda     #<(L07FA)
	ldx     #>(L07FA)
	jsr     _cputsxy
	lda     #$00
	jsr     _revers
	lda     #$0C
	jsr     pusha
	lda     #$17
	jsr     pusha
	lda     #<(L0801)
	ldx     #>(L0801)
	jsr     _cputsxy
L0803:	lda     $0284
	bne     L0803
	jsr     _clrscr
	lda     #$01
	jsr     pusha
	jsr     pusha
	lda     #<(L080D)
	ldx     #>(L080D)
	jsr     _cputsxy
	lda     #$01
	jsr     pusha
	lda     #$02
	jsr     pusha
	lda     #<(L0812)
	ldx     #>(L0812)
	jsr     _cputsxy
	lda     #$01
	jsr     pusha
	lda     #$04
	jsr     pusha
	lda     #<(L0817)
	ldx     #>(L0817)
	jsr     _cputsxy
	lda     #$01
	jsr     pusha
	lda     #$05
	jsr     pusha
	lda     #<(L081C)
	ldx     #>(L081C)
	jsr     _cputsxy
	lda     #$01
	jsr     pusha
	lda     #$07
	jsr     pusha
	lda     #<(L0821)
	ldx     #>(L0821)
	jsr     _cputsxy
	lda     #$01
	jsr     pusha
	lda     #$08
	jsr     pusha
	lda     #<(L0826)
	ldx     #>(L0826)
	jsr     _cputsxy
	lda     #$01
	jsr     pusha
	lda     #$09
	jsr     pusha
	lda     #<(L082B)
	ldx     #>(L082B)
	jsr     _cputsxy
	lda     #$01
	jsr     pusha
	lda     #$0B
	jsr     pusha
	lda     #<(L0830)
	ldx     #>(L0830)
	jsr     _cputsxy
	lda     #$01
	jsr     pusha
	lda     #$0C
	jsr     pusha
	lda     #<(L0835)
	ldx     #>(L0835)
	jsr     _cputsxy
	lda     #$01
	jsr     pusha
	lda     #$11
	jsr     pusha
	lda     #<(L083A)
	ldx     #>(L083A)
	jsr     _cputsxy
	lda     #$01
	jsr     pusha
	lda     #$12
	jsr     pusha
	lda     #<(L083F)
	ldx     #>(L083F)
	jsr     _cputsxy
	lda     #$01
	jsr     pusha
	lda     #$17
	jsr     pusha
	lda     #<(L0844)
	ldx     #>(L0844)
	jsr     _cputsxy
	lda     #$01
	jsr     _revers
	lda     #$07
	jsr     pusha
	lda     #$17
	jsr     pusha
	lda     #<(L084B)
	ldx     #>(L084B)
	jsr     _cputsxy
	lda     #$00
	jsr     _revers
	lda     #$0C
	jsr     pusha
	lda     #$17
	jsr     pusha
	lda     #<(L0852)
	ldx     #>(L0852)
	jsr     _cputsxy
L08DA:	lda     $0284
	beq     L08DA
L085A:	lda     $0284
	bne     L085A
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ displayGameSpeed (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_displayGameSpeed: near

.segment	"CODE"

	lda     _gameSpeed
	bne     L06AD
	lda     #$20
	jsr     pusha
	lda     #$0D
	jsr     pusha
	lda     #<(L06B3)
	ldx     #>(L06B3)
	jmp     _cputsxy
L06AD:	lda     #$20
	jsr     pusha
	lda     #$0D
	jsr     pusha
	lda     #<(L06B9)
	ldx     #>(L06B9)
	jmp     _cputsxy

.endproc

; ---------------------------------------------------------------
; void __near__ displayStartingCave (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_displayStartingCave: near

.segment	"CODE"

	lda     #$24
	jsr     pusha
	lda     #$0C
	jsr     _gotoxy
	lda     #<(L06F3)
	ldx     #>(L06F3)
	jsr     pushax
	ldx     #$00
	lda     _startingCave
	jsr     incax1
	jsr     pushax
	ldy     #$04
	jmp     _cprintf

.endproc

; ---------------------------------------------------------------
; void __near__ playSongLine (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_playSongLine: near

.segment	"CODE"

	ldy     #$00
	lda     (sp),y
	sta     _songLine
	jsr     _rmtPlaySongLine
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ playSFX (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_playSFX: near

.segment	"CODE"

	ldy     #$00
	lda     (sp),y
	sta     _requestedSFXCode
	jsr     _rmtPlaySFX
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ moveLeft (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_moveLeft: near

.segment	"CODE"

	lda     _minerX
	beq     L08DC
	ldx     #$00
	lda     _minerX
	jsr     decax1
	jsr     pushax
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	sta     ptr1
	txa
	adc     #>(_caveElements)
	sta     ptr1+1
	ldy     _minerY
	lda     (ptr1),y
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_passable)
	sta     ptr1+1
	ldy     #<(_passable)
	lda     (ptr1),y
	bne     L08DD
L08DC:	tax
	rts
L08DD:	dec     _minerX
	lda     _minerX
	jsr     pusha
	lda     _minerY
	jsr     pusha
	jsr     _setMinerPos
	jsr     _checkTreasure
	lda     _controlDelay
	sta     _mvDelay
	ldx     #$00
	lda     #$01
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ moveRight (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_moveRight: near

.segment	"CODE"

	lda     _minerX
	cmp     #$13
	beq     L08DF
	ldx     #$00
	lda     _minerX
	jsr     incax1
	jsr     pushax
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	sta     ptr1
	txa
	adc     #>(_caveElements)
	sta     ptr1+1
	ldy     _minerY
	lda     (ptr1),y
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_passable)
	sta     ptr1+1
	ldy     #<(_passable)
	lda     (ptr1),y
	bne     L08E0
L08DF:	ldx     #$00
	txa
	rts
L08E0:	inc     _minerX
	lda     _minerX
	jsr     pusha
	lda     _minerY
	jsr     pusha
	jsr     _setMinerPos
	jsr     _checkTreasure
	lda     _controlDelay
	sta     _mvDelay
	ldx     #$00
	lda     #$01
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ moveUp (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_moveUp: near

.segment	"CODE"

	lda     _minerY
	bne     L08E3
	rts
L08E3:	lda     _minerX
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	sta     ptr1
	txa
	adc     #>(_caveElements)
	sta     ptr1+1
	ldx     #$00
	lda     _minerY
	jsr     decax1
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     _x1
	ldy     _x1
	lda     _passable,y
	beq     L0530
	lda     _minerX
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	sta     ptr1
	txa
	adc     #>(_caveElements)
	sta     ptr1+1
	ldy     _minerY
	lda     (ptr1),y
	cmp     #$07
	bne     L0530
	lda     _x1
	cmp     #$09
	bne     L08E2
	lda     #$00
	sta     _stayHere
	lda     #$01
	sta     _caveDeath
	rts
L08E2:	dec     _minerY
	lda     _minerX
	jsr     pusha
	lda     _minerY
	jsr     pusha
	jsr     _setMinerPos
	jsr     _checkTreasure
	lda     _controlDelay
	sta     _mvDelay
L0530:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ moveDown (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_moveDown: near

.segment	"CODE"

	lda     _minerY
	cmp     #$15
	beq     L050A
	lda     _minerX
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	sta     ptr1
	txa
	adc     #>(_caveElements)
	sta     ptr1+1
	ldx     #$00
	lda     _minerY
	jsr     incax1
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     _x1
	ldy     _x1
	lda     _passable,y
	cmp     #$01
	bne     L050A
	inc     _minerY
	lda     _minerX
	jsr     pusha
	lda     _minerY
	jsr     pusha
	jsr     _setMinerPos
	jsr     _checkTreasure
	lda     _controlDelay
	sta     _mvDelay
L050A:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ jumpUp (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_jumpUp: near

.segment	"CODE"

	ldx     #$00
	lda     _minerY
	beq     L08E7
	lda     _minerX
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	sta     ptr1
	txa
	adc     #>(_caveElements)
	sta     ptr1+1
	ldx     #$00
	lda     _minerY
	jsr     decax1
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     _x1
	cmp     #$09
	bne     L054B
	sty     _stayHere
	lda     #$01
	sta     _caveDeath
	ldx     #$00
	rts
L054B:	ldy     _x1
	lda     _passable,y
	bne     L08E6
	tax
	rts
L08E6:	dec     _minerY
	lda     _minerX
	jsr     pusha
	lda     _minerY
	jsr     pusha
	jsr     _setMinerPos
	jsr     _checkTreasure
	ldx     #$00
	txa
L08E7:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ fallDown (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fallDown: near

.segment	"CODE"

	lda     _minerY
	cmp     #$15
	beq     L051C
	lda     _minerX
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	sta     ptr1
	txa
	adc     #>(_caveElements)
	sta     ptr1+1
	ldx     #$00
	lda     _minerY
	jsr     incax1
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     _x1
	ldy     _x1
	lda     _passable,y
	cmp     #$01
	bne     L051C
	inc     _minerY
	lda     _minerX
	jsr     pusha
	lda     _minerY
	jsr     pusha
	jsr     _setMinerPos
	jmp     _checkTreasure
L051C:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ handleHighJump (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_handleHighJump: near

.segment	"CODE"

	lda     _hijumpSpeedA
	jsr     pusha
	lda     #$00
	jsr     pusha
	jsr     decsp1
	lda     #>(_minerDataJump)
	sta     _minerData+1
	lda     #<(_minerDataJump)
	sta     _minerData
	lda     #$00
	sta     _y1
	lda     #$03
	sta     _hiJump
	lda     #$00
	sta     _mvDelay
	jmp     L08EC
L0569:	jsr     _jumpUp
	tax
	beq     L059B
	jmp     L056A
L08E9:	lda     _mvDelay
	bne     L057B
	lda     $0278
	sta     _hijs
	cmp     #$06
	beq     L058D
	cmp     #$07
	beq     L058D
	cmp     #$0A
	beq     L057F
	cmp     #$0B
	bne     L08EA
L057F:	lda     _y1
	bne     L057B
	jsr     _moveLeft
	tax
	beq     L057B
	lda     #$01
	sta     _y1
	jmp     L057B
L058D:	lda     _y1
	bne     L057B
	jsr     _moveRight
	tax
	beq     L057B
	lda     #$01
	sta     _y1
	jmp     L057B
L08EA:	lda     #$00
	sta     _mvDelay
L057B:	ldy     #$00
	lda     (sp),y
	cmp     $0014
	beq     L059B
	lda     $0014
	sta     (sp),y
	iny
	lda     (sp),y
	clc
	adc     #$01
	sta     (sp),y
L059B:	ldy     #$01
	lda     (sp),y
	iny
	cmp     (sp),y
	bcc     L08E9
	lda     _hiJump
	cmp     #$02
	bne     L08EB
	lda     _hijumpSpeedB
	sta     (sp),y
L08EB:	lda     #$00
	dey
	sta     (sp),y
	dec     _hiJump
L08EC:	lda     _hiJump
	jne     L0569
L056A:	jsr     _checkDeath
	lda     #>(_minerDataNormal)
	sta     _minerData+1
	lda     #<(_minerDataNormal)
	sta     _minerData
	jsr     _repaintMiner
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ updateStatusBar (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updateStatusBar: near

.segment	"CODE"

	lda     #>(_CLM_DATA_STATUSBARSCREEN)
	sta     ptr1+1
	lda     #<(_CLM_DATA_STATUSBARSCREEN)
	sta     ptr1
	lda     #$00
	ldy     #$27
L08ED:	sta     (ptr1),y
	dey
	bpl     L08ED
	lda     #$00
	sta     _y1
	tax
L08EE:	lda     _y1
	cmp     _lives
	bcs     L08EF
	clc
	adc     #<(_CLM_DATA_STATUSBARSCREEN)
	sta     ptr1
	lda     #$00
	adc     #>(_CLM_DATA_STATUSBARSCREEN)
	sta     ptr1+1
	lda     #$7B
	ldy     #$00
	sta     (ptr1),y
	inc     _y1
	jmp     L08EE
L08EF:	lda     _gameType
	cmp     #$01
	bne     L08F0
	lda     #<(_CLM_DATA_STATUSBARSCREEN+32)
	ldx     #>(_CLM_DATA_STATUSBARSCREEN+32)
	jsr     pushax
	lda     #<(_trainingLiteral)
	ldx     #>(_trainingLiteral)
	jsr     pushax
	ldx     #$00
	lda     #$08
	jmp     _memcpy
L08F0:	lda     _currentCave
	ldy     #$1B
	jsr     incaxy
	clc
	adc     #$01
	sta     _x1
	lda     #$1B
	sta     _y1
L08F1:	lda     _y1
	cmp     _x1
	bcs     L05FC
	clc
	adc     #<(_CLM_DATA_STATUSBARSCREEN)
	sta     ptr1
	lda     #$00
	adc     #>(_CLM_DATA_STATUSBARSCREEN)
	sta     ptr1+1
	lda     #$60
	ldy     #$00
	sta     (ptr1),y
	inc     _y1
	jmp     L08F1
L05FC:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ checkTreasure (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_checkTreasure: near

.segment	"CODE"

	lda     _minerX
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	sta     ptr1
	txa
	adc     #>(_caveElements)
	sta     ptr1+1
	ldy     _minerY
	lda     (ptr1),y
	sta     _x1
	cmp     #$0A
	lda     #$00
	tax
	bcc     L08FA
	lda     _x1
	cmp     #$0D
	bcc     L08F7
	txa
	rts
L08F7:	inc     _diamondsCollected
	lda     _minerX
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	tay
	txa
	adc     #>(_caveElements)
	tax
	tya
	clc
	adc     _minerY
	bcc     L08F3
	inx
L08F3:	sta     ptr1
	stx     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
	lda     _minerX
	jsr     pusha
	lda     _minerY
	jsr     pusha
	lda     #$00
	jsr     pusha
	jsr     _paintElement
	lda     #$0A
	jsr     pusha
	jsr     _playSFX
	ldx     #$00
	lda     _diamondsInCave
	cmp     _diamondsCollected
	bne     L08F8
	stx     _stayHere
	lda     #$01
	sta     _caveAllPicked
L08F8:	lda     #$01
	rts
L08FA:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ checkDeath (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_checkDeath: near

.segment	"CODE"

	lda     _minerX
	jsr     pusha0
	lda     #$16
	jsr     tosmula0
	clc
	adc     #<(_caveElements)
	sta     ptr1
	txa
	adc     #>(_caveElements)
	sta     ptr1+1
	ldx     #$00
	lda     _minerY
	jsr     incax1
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     _x1
	cmp     #$08
	bne     L05B4
	sty     _stayHere
	lda     #$01
	sta     _caveDeath
L05B4:	rts

.endproc

; ---------------------------------------------------------------
; int __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

	lda     #$00
	sta     _gameOverType
	jsr     _clrscr
	lda     #$00
	sta     _maxCaveReached
	sta     _gameSpeed
	lda     #$01
	sta     $0244
	lda     $D01F
	cmp     #$05
	bne     L00A2
	lda     #$0C
	sta     _maxCaveReached
L00A2:	jsr     _rmtSuspend
	jsr     _rmtSetVBI
	lda     $0230
	sta     _menuDl1
	lda     $0231
	sta     _menuDl2
	lda     #$00
	jsr     _cursor
	lda     #$01
	sta     $02DB
	jsr     _pmgInit
L00BB:	lda     #$00
	sta     $022F
	lda     #$02
	jsr     pusha0
	jsr     _delay
	lda     #$60
	sta     $D40E
	lda     #$02
	jsr     pusha0
	jsr     _delay
	lda     #$3E
	sta     $022F
	lda     _gameOverType
	cmp     #$01
	beq     L00D8
	cmp     #$02
	beq     L00E1
	cmp     #$03
	beq     L00EA
	jmp     L00D5
L00D8:	jsr     _rmtSuspend
	lda     #$0E
	jsr     pusha
	jsr     _playSongLine
	jsr     _rmtResume
	jsr     _displayGameOver
	jmp     L00D5
L00E1:	jsr     _rmtSuspend
	lda     #$10
	jsr     pusha
	jsr     _playSongLine
	jsr     _rmtResume
	jsr     _displayCongratulations
	jmp     L00D5
L00EA:	jsr     _rmtSuspend
	lda     #$10
	jsr     pusha
	jsr     _playSongLine
	jsr     _rmtResume
	jsr     _displayReturnToMenuScreen
L00D5:	jsr     _rmtSuspend
	lda     #$00
	jsr     pusha
	jsr     _playSongLine
	jsr     _rmtResume
	lda     #$01
	jsr     pusha
	lda     #$06
	jsr     pusha
	jsr     _setMinerPos
	jsr     _displayMainMenu
	jsr     _kbhit
	tax
	beq     L08FC
	jsr     _cgetc
L08FC:	lda     $0284
	beq     L08FC
	lda     $0278
	cmp     #$0F
	bne     L08FC
L08FE:	lda     $0284
	bne     L08FF
	sta     $004D
	sta     _gameType
	jmp     L0904
L08FF:	lda     $0278
	cmp     #$07
	bne     L0900
	lda     _startingCave
	cmp     _maxCaveReached
	bcs     L0900
	inc     _startingCave
	jsr     _displayStartingCave
	lda     #$0A
	jsr     pusha0
	jsr     _delay
	jmp     L08FE
L0900:	lda     $0278
	cmp     #$0B
	bne     L0901
	lda     _startingCave
	beq     L0901
	dec     _startingCave
	jsr     _displayStartingCave
	lda     #$0A
	jsr     pusha0
	jsr     _delay
	jmp     L08FE
L0901:	lda     $0278
	cmp     #$0D
	bne     L0902
	lda     #$01
	sec
	sbc     _gameSpeed
	sta     _gameSpeed
	jsr     _displayGameSpeed
	lda     #$0A
	jsr     pusha0
	jsr     _delay
	jmp     L08FE
L0902:	lda     $0278
	cmp     #$0E
	bne     L0137
	lda     #$00
	sta     $004D
	jsr     _displayTrainingText
	lda     #$01
	sta     _gameType
	jmp     L0903
L0137:	jsr     _kbhit
	tax
	jeq     L08FE
	jsr     _cgetc
	sta     _x1
	cmp     #$1B
	jne     L08FE
	jsr     _rmtAllStop
	jsr     _rmtRestoreVBI
	jsr     _asmReboot
	ldx     #$00
	txa
	rts
L0903:	lda     #$00
L0904:	sta     _gameOverType
	lda     _gameSpeed
	jsr     pusha
	jsr     _get_tv
	jsr     pusha
	jsr     _adjustGameSpeed
	jsr     _rmtSuspend
	jsr     _rmtAllStop
	lda     #$0B
	jsr     pusha
	jsr     _playSongLine
	jsr     _rmtResume
	jsr     _doGame
	jmp     L00BB

.endproc

